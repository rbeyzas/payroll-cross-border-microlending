/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PayrollApp","structs":{},"methods":[{"name":"createPayroll","args":[{"type":"string","name":"asaId","desc":"ASA ID for payments (0 for ALGO)"},{"type":"string","name":"cycleSecs","desc":"Payment cycle in seconds"},{"type":"string","name":"adminAddress","desc":"Admin address who can manage employees"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create payroll system (initialize after deployment)","events":[],"recommendations":{}},{"name":"addEmployee","args":[{"type":"string","name":"employeeAddress","desc":"Employee's Algorand address"},{"type":"string","name":"amount","desc":"Employee's salary in microALGO"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add employee to payroll","events":[],"recommendations":{}},{"name":"removeEmployee","args":[{"type":"string","name":"employeeAddress","desc":"Employee's Algorand address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove employee from payroll","events":[],"recommendations":{}},{"name":"fundApp","args":[{"type":"string","name":"amount","desc":"Amount to fund in microALGO"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Fund the application with ALGO or ASA","events":[],"recommendations":{}},{"name":"disburse","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Disburse payments to employees","events":[],"recommendations":{}},{"name":"pauseEmployee","args":[{"type":"string","name":"employeeAddress","desc":"Employee's Algorand address"},{"type":"string","name":"paused","desc":"Whether employee is paused (true/false)"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Pause or unpause an employee","events":[],"recommendations":{}},{"name":"getEmployeeInfo","args":[{"type":"string","name":"employeeAddress","desc":"Employee's Algorand address"}],"returns":{"type":"string","desc":"Employee info as \"name,salary,paused\" string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get employee information from Box Storage","events":[],"recommendations":{}},{"name":"getPayrollInfo","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get payroll information","events":[],"recommendations":{}},{"name":"getTotalEmployees","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total number of employees","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[85,94,103,130,139,148,157,166,175],"errorMessage":"OnCompletion is not NoOp"},{"pc":[189],"errorMessage":"can only call when creating"},{"pc":[88,97,106,133,142,151,160,169,178],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIFBheXJvbGxBcHAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTQKICAgIHB1c2hieXRlc3MgMHgzOTlhZTQxZiAweGU4OGE3YjcwIDB4MjVhODMzYjkgMHgwZTFkMTEwOSAweDY5ODczNmFkIDB4NzQ1NGQwNzUgMHhkMjlkMjVjMCAweGZhMzQ0Mzc5IDB4YzI0NjZmOWEgLy8gbWV0aG9kICJjcmVhdGVQYXlyb2xsKHN0cmluZyxzdHJpbmcsc3RyaW5nKXZvaWQiLCBtZXRob2QgImFkZEVtcGxveWVlKHN0cmluZyxzdHJpbmcpdm9pZCIsIG1ldGhvZCAicmVtb3ZlRW1wbG95ZWUoc3RyaW5nKXZvaWQiLCBtZXRob2QgImZ1bmRBcHAoc3RyaW5nKXZvaWQiLCBtZXRob2QgImRpc2J1cnNlKCl2b2lkIiwgbWV0aG9kICJwYXVzZUVtcGxveWVlKHN0cmluZyxzdHJpbmcpdm9pZCIsIG1ldGhvZCAiZ2V0RW1wbG95ZWVJbmZvKHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldFBheXJvbGxJbmZvKCl2b2lkIiwgbWV0aG9kICJnZXRUb3RhbEVtcGxveWVlcygpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlUGF5cm9sbF9yb3V0ZUAzIG1haW5fYWRkRW1wbG95ZWVfcm91dGVANCBtYWluX3JlbW92ZUVtcGxveWVlX3JvdXRlQDUgbWFpbl9mdW5kQXBwX3JvdXRlQDYgbWFpbl9kaXNidXJzZV9yb3V0ZUA3IG1haW5fcGF1c2VFbXBsb3llZV9yb3V0ZUA4IG1haW5fZ2V0RW1wbG95ZWVJbmZvX3JvdXRlQDkgbWFpbl9nZXRQYXlyb2xsSW5mb19yb3V0ZUAxMCBtYWluX2dldFRvdGFsRW1wbG95ZWVzX3JvdXRlQDExCgptYWluX2FmdGVyX2lmX2Vsc2VAMTg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgUGF5cm9sbEFwcCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHB1c2hpbnQgMCAvLyAwCiAgICByZXR1cm4KCm1haW5fZ2V0VG90YWxFbXBsb3llZXNfcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czo3NQogICAgLy8gcHVibGljIGdldFRvdGFsRW1wbG95ZWVzKCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFBheXJvbGxJbmZvX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6NjgKICAgIC8vIHB1YmxpYyBnZXRQYXlyb2xsSW5mbygpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRFbXBsb3llZUluZm9fcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjYwCiAgICAvLyBwdWJsaWMgZ2V0RW1wbG95ZWVJbmZvKGVtcGxveWVlQWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUwMDA5NmU2Zjc0NWY2NjZmNzU2ZTY0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcGF1c2VFbXBsb3llZV9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyBwYXVzZUVtcGxveWVlKGVtcGxveWVlQWRkcmVzczogc3RyaW5nLCBwYXVzZWQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2Rpc2J1cnNlX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czo0MgogICAgLy8gcHVibGljIGRpc2J1cnNlKCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2Z1bmRBcHBfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBwdWJsaWMgZnVuZEFwcChhbW91bnQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlbW92ZUVtcGxveWVlX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gcHVibGljIHJlbW92ZUVtcGxveWVlKGVtcGxveWVlQWRkcmVzczogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkRW1wbG95ZWVfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgYWRkRW1wbG95ZWUoZW1wbG95ZWVBZGRyZXNzOiBzdHJpbmcsIGFtb3VudDogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlUGF5cm9sbF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6MTAKICAgIC8vIHB1YmxpYyBjcmVhdGVQYXlyb2xsKGFzYUlkOiBzdHJpbmcsIGN5Y2xlU2Vjczogc3RyaW5nLCBhZG1pbkFkZHJlc3M6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjbGFzcyBQYXlyb2xsQXBwIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxOAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4K","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiABATEbQQCsggkEOZrkHwTointwBCWoM7kEDh0RCQRphzatBHRU0HUE0p0lwAT6NEN5BMJGb5o2GgCOCQBdAFQASwBCADkAMAAVAAwAA4EAQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGESADxUffHUACW5vdF9mb3VuZLAiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZQP+VMRgURCJD","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PayrollApp contract
 */
export type PayrollAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPayroll(string,string,string)void': {
      /**
       * ASA ID for payments (0 for ALGO)
       */
      asaId: string
      /**
       * Payment cycle in seconds
       */
      cycleSecs: string
      /**
       * Admin address who can manage employees
       */
      adminAddress: string
    }
    'addEmployee(string,string)void': {
      /**
       * Employee's Algorand address
       */
      employeeAddress: string
      /**
       * Employee's salary in microALGO
       */
      amount: string
    }
    'removeEmployee(string)void': {
      /**
       * Employee's Algorand address
       */
      employeeAddress: string
    }
    'fundApp(string)void': {
      /**
       * Amount to fund in microALGO
       */
      amount: string
    }
    'disburse()void': Record<string, never>
    'pauseEmployee(string,string)void': {
      /**
       * Employee's Algorand address
       */
      employeeAddress: string
      /**
       * Whether employee is paused (true/false)
       */
      paused: string
    }
    'getEmployeeInfo(string)string': {
      /**
       * Employee's Algorand address
       */
      employeeAddress: string
    }
    'getPayrollInfo()void': Record<string, never>
    'getTotalEmployees()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPayroll(string,string,string)void': [asaId: string, cycleSecs: string, adminAddress: string]
    'addEmployee(string,string)void': [employeeAddress: string, amount: string]
    'removeEmployee(string)void': [employeeAddress: string]
    'fundApp(string)void': [amount: string]
    'disburse()void': []
    'pauseEmployee(string,string)void': [employeeAddress: string, paused: string]
    'getEmployeeInfo(string)string': [employeeAddress: string]
    'getPayrollInfo()void': []
    'getTotalEmployees()void': []
  }
}

/**
 * The return type for each method
 */
export type PayrollAppReturns = {
  'createPayroll(string,string,string)void': void
  'addEmployee(string,string)void': void
  'removeEmployee(string)void': void
  'fundApp(string)void': void
  'disburse()void': void
  'pauseEmployee(string,string)void': void
  'getEmployeeInfo(string)string': string
  'getPayrollInfo()void': void
  'getTotalEmployees()void': void
}

/**
 * Defines the types of available calls and state of the PayrollApp smart contract.
 */
export type PayrollAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPayroll(string,string,string)void' | 'createPayroll', {
      argsObj: PayrollAppArgs['obj']['createPayroll(string,string,string)void']
      argsTuple: PayrollAppArgs['tuple']['createPayroll(string,string,string)void']
      returns: PayrollAppReturns['createPayroll(string,string,string)void']
    }>
    & Record<'addEmployee(string,string)void' | 'addEmployee', {
      argsObj: PayrollAppArgs['obj']['addEmployee(string,string)void']
      argsTuple: PayrollAppArgs['tuple']['addEmployee(string,string)void']
      returns: PayrollAppReturns['addEmployee(string,string)void']
    }>
    & Record<'removeEmployee(string)void' | 'removeEmployee', {
      argsObj: PayrollAppArgs['obj']['removeEmployee(string)void']
      argsTuple: PayrollAppArgs['tuple']['removeEmployee(string)void']
      returns: PayrollAppReturns['removeEmployee(string)void']
    }>
    & Record<'fundApp(string)void' | 'fundApp', {
      argsObj: PayrollAppArgs['obj']['fundApp(string)void']
      argsTuple: PayrollAppArgs['tuple']['fundApp(string)void']
      returns: PayrollAppReturns['fundApp(string)void']
    }>
    & Record<'disburse()void' | 'disburse', {
      argsObj: PayrollAppArgs['obj']['disburse()void']
      argsTuple: PayrollAppArgs['tuple']['disburse()void']
      returns: PayrollAppReturns['disburse()void']
    }>
    & Record<'pauseEmployee(string,string)void' | 'pauseEmployee', {
      argsObj: PayrollAppArgs['obj']['pauseEmployee(string,string)void']
      argsTuple: PayrollAppArgs['tuple']['pauseEmployee(string,string)void']
      returns: PayrollAppReturns['pauseEmployee(string,string)void']
    }>
    & Record<'getEmployeeInfo(string)string' | 'getEmployeeInfo', {
      argsObj: PayrollAppArgs['obj']['getEmployeeInfo(string)string']
      argsTuple: PayrollAppArgs['tuple']['getEmployeeInfo(string)string']
      /**
       * Employee info as "name,salary,paused" string
       */
      returns: PayrollAppReturns['getEmployeeInfo(string)string']
    }>
    & Record<'getPayrollInfo()void' | 'getPayrollInfo', {
      argsObj: PayrollAppArgs['obj']['getPayrollInfo()void']
      argsTuple: PayrollAppArgs['tuple']['getPayrollInfo()void']
      returns: PayrollAppReturns['getPayrollInfo()void']
    }>
    & Record<'getTotalEmployees()void' | 'getTotalEmployees', {
      argsObj: PayrollAppArgs['obj']['getTotalEmployees()void']
      argsTuple: PayrollAppArgs['tuple']['getTotalEmployees()void']
      returns: PayrollAppReturns['getTotalEmployees()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PayrollAppSignatures = keyof PayrollAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PayrollAppNonVoidMethodSignatures = keyof PayrollAppTypes['methods'] extends infer T ? T extends keyof PayrollAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PayrollApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PayrollAppSignatures> = PayrollAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PayrollApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PayrollAppSignatures> = PayrollAppTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PayrollAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PayrollAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PayrollAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PayrollApp smart contract
 */
export abstract class PayrollAppParamsFactory {
  /**
   * Constructs a no op call for the createPayroll(string,string,string)void ABI method
   *
   * Create payroll system (initialize after deployment)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPayroll(params: CallParams<PayrollAppArgs['obj']['createPayroll(string,string,string)void'] | PayrollAppArgs['tuple']['createPayroll(string,string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPayroll(string,string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId, params.args.cycleSecs, params.args.adminAddress],
    }
  }
  /**
   * Constructs a no op call for the addEmployee(string,string)void ABI method
   *
   * Add employee to payroll
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addEmployee(params: CallParams<PayrollAppArgs['obj']['addEmployee(string,string)void'] | PayrollAppArgs['tuple']['addEmployee(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addEmployee(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.employeeAddress, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the removeEmployee(string)void ABI method
   *
   * Remove employee from payroll
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeEmployee(params: CallParams<PayrollAppArgs['obj']['removeEmployee(string)void'] | PayrollAppArgs['tuple']['removeEmployee(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeEmployee(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.employeeAddress],
    }
  }
  /**
   * Constructs a no op call for the fundApp(string)void ABI method
   *
   * Fund the application with ALGO or ASA
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundApp(params: CallParams<PayrollAppArgs['obj']['fundApp(string)void'] | PayrollAppArgs['tuple']['fundApp(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundApp(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the disburse()void ABI method
   *
   * Disburse payments to employees
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static disburse(params: CallParams<PayrollAppArgs['obj']['disburse()void'] | PayrollAppArgs['tuple']['disburse()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'disburse()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the pauseEmployee(string,string)void ABI method
   *
   * Pause or unpause an employee
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseEmployee(params: CallParams<PayrollAppArgs['obj']['pauseEmployee(string,string)void'] | PayrollAppArgs['tuple']['pauseEmployee(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pauseEmployee(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.employeeAddress, params.args.paused],
    }
  }
  /**
   * Constructs a no op call for the getEmployeeInfo(string)string ABI method
   *
   * Get employee information from Box Storage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEmployeeInfo(params: CallParams<PayrollAppArgs['obj']['getEmployeeInfo(string)string'] | PayrollAppArgs['tuple']['getEmployeeInfo(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getEmployeeInfo(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.employeeAddress],
    }
  }
  /**
   * Constructs a no op call for the getPayrollInfo()void ABI method
   *
   * Get payroll information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPayrollInfo(params: CallParams<PayrollAppArgs['obj']['getPayrollInfo()void'] | PayrollAppArgs['tuple']['getPayrollInfo()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPayrollInfo()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalEmployees()void ABI method
   *
   * Get total number of employees
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalEmployees(params: CallParams<PayrollAppArgs['obj']['getTotalEmployees()void'] | PayrollAppArgs['tuple']['getTotalEmployees()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalEmployees()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PayrollApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PayrollAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PayrollAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PayrollAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PayrollAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PayrollApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PayrollAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PayrollAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PayrollApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PayrollApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PayrollApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PayrollAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PayrollApp smart contract
 */
export class PayrollAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PayrollAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PayrollApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PayrollAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PayrollAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PayrollAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PayrollAppClient> {
    return new PayrollAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PayrollAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PayrollAppClient> {
    return new PayrollAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PayrollApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `createPayroll(string,string,string)void` ABI method.
     *
     * Create payroll system (initialize after deployment)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPayroll: (params: CallParams<PayrollAppArgs['obj']['createPayroll(string,string,string)void'] | PayrollAppArgs['tuple']['createPayroll(string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.createPayroll(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `addEmployee(string,string)void` ABI method.
     *
     * Add employee to payroll
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addEmployee: (params: CallParams<PayrollAppArgs['obj']['addEmployee(string,string)void'] | PayrollAppArgs['tuple']['addEmployee(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.addEmployee(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `removeEmployee(string)void` ABI method.
     *
     * Remove employee from payroll
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeEmployee: (params: CallParams<PayrollAppArgs['obj']['removeEmployee(string)void'] | PayrollAppArgs['tuple']['removeEmployee(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.removeEmployee(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `fundApp(string)void` ABI method.
     *
     * Fund the application with ALGO or ASA
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundApp: (params: CallParams<PayrollAppArgs['obj']['fundApp(string)void'] | PayrollAppArgs['tuple']['fundApp(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.fundApp(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `disburse()void` ABI method.
     *
     * Disburse payments to employees
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    disburse: (params: CallParams<PayrollAppArgs['obj']['disburse()void'] | PayrollAppArgs['tuple']['disburse()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.disburse(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `pauseEmployee(string,string)void` ABI method.
     *
     * Pause or unpause an employee
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseEmployee: (params: CallParams<PayrollAppArgs['obj']['pauseEmployee(string,string)void'] | PayrollAppArgs['tuple']['pauseEmployee(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.pauseEmployee(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getEmployeeInfo(string)string` ABI method.
     *
     * Get employee information from Box Storage
     *
     * @param params The params for the smart contract call
     * @returns The call params: Employee info as "name,salary,paused" string
     */
    getEmployeeInfo: (params: CallParams<PayrollAppArgs['obj']['getEmployeeInfo(string)string'] | PayrollAppArgs['tuple']['getEmployeeInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.getEmployeeInfo(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getPayrollInfo()void` ABI method.
     *
     * Get payroll information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPayrollInfo: (params: CallParams<PayrollAppArgs['obj']['getPayrollInfo()void'] | PayrollAppArgs['tuple']['getPayrollInfo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.getPayrollInfo(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getTotalEmployees()void` ABI method.
     *
     * Get total number of employees
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalEmployees: (params: CallParams<PayrollAppArgs['obj']['getTotalEmployees()void'] | PayrollAppArgs['tuple']['getTotalEmployees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PayrollAppParamsFactory.getTotalEmployees(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PayrollApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `createPayroll(string,string,string)void` ABI method.
     *
     * Create payroll system (initialize after deployment)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPayroll: (params: CallParams<PayrollAppArgs['obj']['createPayroll(string,string,string)void'] | PayrollAppArgs['tuple']['createPayroll(string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.createPayroll(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `addEmployee(string,string)void` ABI method.
     *
     * Add employee to payroll
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addEmployee: (params: CallParams<PayrollAppArgs['obj']['addEmployee(string,string)void'] | PayrollAppArgs['tuple']['addEmployee(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.addEmployee(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `removeEmployee(string)void` ABI method.
     *
     * Remove employee from payroll
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeEmployee: (params: CallParams<PayrollAppArgs['obj']['removeEmployee(string)void'] | PayrollAppArgs['tuple']['removeEmployee(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.removeEmployee(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `fundApp(string)void` ABI method.
     *
     * Fund the application with ALGO or ASA
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundApp: (params: CallParams<PayrollAppArgs['obj']['fundApp(string)void'] | PayrollAppArgs['tuple']['fundApp(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.fundApp(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `disburse()void` ABI method.
     *
     * Disburse payments to employees
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    disburse: (params: CallParams<PayrollAppArgs['obj']['disburse()void'] | PayrollAppArgs['tuple']['disburse()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.disburse(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `pauseEmployee(string,string)void` ABI method.
     *
     * Pause or unpause an employee
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseEmployee: (params: CallParams<PayrollAppArgs['obj']['pauseEmployee(string,string)void'] | PayrollAppArgs['tuple']['pauseEmployee(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.pauseEmployee(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getEmployeeInfo(string)string` ABI method.
     *
     * Get employee information from Box Storage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Employee info as "name,salary,paused" string
     */
    getEmployeeInfo: (params: CallParams<PayrollAppArgs['obj']['getEmployeeInfo(string)string'] | PayrollAppArgs['tuple']['getEmployeeInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.getEmployeeInfo(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getPayrollInfo()void` ABI method.
     *
     * Get payroll information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPayrollInfo: (params: CallParams<PayrollAppArgs['obj']['getPayrollInfo()void'] | PayrollAppArgs['tuple']['getPayrollInfo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.getPayrollInfo(params))
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getTotalEmployees()void` ABI method.
     *
     * Get total number of employees
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalEmployees: (params: CallParams<PayrollAppArgs['obj']['getTotalEmployees()void'] | PayrollAppArgs['tuple']['getTotalEmployees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PayrollAppParamsFactory.getTotalEmployees(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PayrollApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `createPayroll(string,string,string)void` ABI method.
     *
     * Create payroll system (initialize after deployment)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPayroll: async (params: CallParams<PayrollAppArgs['obj']['createPayroll(string,string,string)void'] | PayrollAppArgs['tuple']['createPayroll(string,string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.createPayroll(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['createPayroll(string,string,string)void'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `addEmployee(string,string)void` ABI method.
     *
     * Add employee to payroll
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addEmployee: async (params: CallParams<PayrollAppArgs['obj']['addEmployee(string,string)void'] | PayrollAppArgs['tuple']['addEmployee(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.addEmployee(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['addEmployee(string,string)void'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `removeEmployee(string)void` ABI method.
     *
     * Remove employee from payroll
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeEmployee: async (params: CallParams<PayrollAppArgs['obj']['removeEmployee(string)void'] | PayrollAppArgs['tuple']['removeEmployee(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.removeEmployee(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['removeEmployee(string)void'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `fundApp(string)void` ABI method.
     *
     * Fund the application with ALGO or ASA
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundApp: async (params: CallParams<PayrollAppArgs['obj']['fundApp(string)void'] | PayrollAppArgs['tuple']['fundApp(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.fundApp(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['fundApp(string)void'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `disburse()void` ABI method.
     *
     * Disburse payments to employees
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    disburse: async (params: CallParams<PayrollAppArgs['obj']['disburse()void'] | PayrollAppArgs['tuple']['disburse()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.disburse(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['disburse()void'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `pauseEmployee(string,string)void` ABI method.
     *
     * Pause or unpause an employee
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseEmployee: async (params: CallParams<PayrollAppArgs['obj']['pauseEmployee(string,string)void'] | PayrollAppArgs['tuple']['pauseEmployee(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.pauseEmployee(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['pauseEmployee(string,string)void'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getEmployeeInfo(string)string` ABI method.
     *
     * Get employee information from Box Storage
     *
     * @param params The params for the smart contract call
     * @returns The call result: Employee info as "name,salary,paused" string
     */
    getEmployeeInfo: async (params: CallParams<PayrollAppArgs['obj']['getEmployeeInfo(string)string'] | PayrollAppArgs['tuple']['getEmployeeInfo(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.getEmployeeInfo(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['getEmployeeInfo(string)string'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getPayrollInfo()void` ABI method.
     *
     * Get payroll information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPayrollInfo: async (params: CallParams<PayrollAppArgs['obj']['getPayrollInfo()void'] | PayrollAppArgs['tuple']['getPayrollInfo()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.getPayrollInfo(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['getPayrollInfo()void'])}
    },

    /**
     * Makes a call to the PayrollApp smart contract using the `getTotalEmployees()void` ABI method.
     *
     * Get total number of employees
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalEmployees: async (params: CallParams<PayrollAppArgs['obj']['getTotalEmployees()void'] | PayrollAppArgs['tuple']['getTotalEmployees()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PayrollAppParamsFactory.getTotalEmployees(params))
      return {...result, return: result.return as unknown as (undefined | PayrollAppReturns['getTotalEmployees()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PayrollAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PayrollApp app
   */
  state = {
  }

  public newGroup(): PayrollAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPayroll(string,string,string)void method call against the PayrollApp contract
       */
      createPayroll(params: CallParams<PayrollAppArgs['obj']['createPayroll(string,string,string)void'] | PayrollAppArgs['tuple']['createPayroll(string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPayroll(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addEmployee(string,string)void method call against the PayrollApp contract
       */
      addEmployee(params: CallParams<PayrollAppArgs['obj']['addEmployee(string,string)void'] | PayrollAppArgs['tuple']['addEmployee(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addEmployee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeEmployee(string)void method call against the PayrollApp contract
       */
      removeEmployee(params: CallParams<PayrollAppArgs['obj']['removeEmployee(string)void'] | PayrollAppArgs['tuple']['removeEmployee(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeEmployee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fundApp(string)void method call against the PayrollApp contract
       */
      fundApp(params: CallParams<PayrollAppArgs['obj']['fundApp(string)void'] | PayrollAppArgs['tuple']['fundApp(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a disburse()void method call against the PayrollApp contract
       */
      disburse(params: CallParams<PayrollAppArgs['obj']['disburse()void'] | PayrollAppArgs['tuple']['disburse()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.disburse(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pauseEmployee(string,string)void method call against the PayrollApp contract
       */
      pauseEmployee(params: CallParams<PayrollAppArgs['obj']['pauseEmployee(string,string)void'] | PayrollAppArgs['tuple']['pauseEmployee(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseEmployee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getEmployeeInfo(string)string method call against the PayrollApp contract
       */
      getEmployeeInfo(params: CallParams<PayrollAppArgs['obj']['getEmployeeInfo(string)string'] | PayrollAppArgs['tuple']['getEmployeeInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEmployeeInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getEmployeeInfo(string)string', v))
        return this
      },
      /**
       * Add a getPayrollInfo()void method call against the PayrollApp contract
       */
      getPayrollInfo(params: CallParams<PayrollAppArgs['obj']['getPayrollInfo()void'] | PayrollAppArgs['tuple']['getPayrollInfo()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPayrollInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getTotalEmployees()void method call against the PayrollApp contract
       */
      getTotalEmployees(params: CallParams<PayrollAppArgs['obj']['getTotalEmployees()void'] | PayrollAppArgs['tuple']['getTotalEmployees()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalEmployees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the PayrollApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PayrollAppComposer
  }
}
export type PayrollAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPayroll(string,string,string)void ABI method.
   *
   * Create payroll system (initialize after deployment)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPayroll(params?: CallParams<PayrollAppArgs['obj']['createPayroll(string,string,string)void'] | PayrollAppArgs['tuple']['createPayroll(string,string,string)void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['createPayroll(string,string,string)void'] | undefined]>

  /**
   * Calls the addEmployee(string,string)void ABI method.
   *
   * Add employee to payroll
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addEmployee(params?: CallParams<PayrollAppArgs['obj']['addEmployee(string,string)void'] | PayrollAppArgs['tuple']['addEmployee(string,string)void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['addEmployee(string,string)void'] | undefined]>

  /**
   * Calls the removeEmployee(string)void ABI method.
   *
   * Remove employee from payroll
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeEmployee(params?: CallParams<PayrollAppArgs['obj']['removeEmployee(string)void'] | PayrollAppArgs['tuple']['removeEmployee(string)void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['removeEmployee(string)void'] | undefined]>

  /**
   * Calls the fundApp(string)void ABI method.
   *
   * Fund the application with ALGO or ASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundApp(params?: CallParams<PayrollAppArgs['obj']['fundApp(string)void'] | PayrollAppArgs['tuple']['fundApp(string)void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['fundApp(string)void'] | undefined]>

  /**
   * Calls the disburse()void ABI method.
   *
   * Disburse payments to employees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  disburse(params?: CallParams<PayrollAppArgs['obj']['disburse()void'] | PayrollAppArgs['tuple']['disburse()void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['disburse()void'] | undefined]>

  /**
   * Calls the pauseEmployee(string,string)void ABI method.
   *
   * Pause or unpause an employee
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseEmployee(params?: CallParams<PayrollAppArgs['obj']['pauseEmployee(string,string)void'] | PayrollAppArgs['tuple']['pauseEmployee(string,string)void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['pauseEmployee(string,string)void'] | undefined]>

  /**
   * Calls the getEmployeeInfo(string)string ABI method.
   *
   * Get employee information from Box Storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEmployeeInfo(params?: CallParams<PayrollAppArgs['obj']['getEmployeeInfo(string)string'] | PayrollAppArgs['tuple']['getEmployeeInfo(string)string']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['getEmployeeInfo(string)string'] | undefined]>

  /**
   * Calls the getPayrollInfo()void ABI method.
   *
   * Get payroll information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPayrollInfo(params?: CallParams<PayrollAppArgs['obj']['getPayrollInfo()void'] | PayrollAppArgs['tuple']['getPayrollInfo()void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['getPayrollInfo()void'] | undefined]>

  /**
   * Calls the getTotalEmployees()void ABI method.
   *
   * Get total number of employees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalEmployees(params?: CallParams<PayrollAppArgs['obj']['getTotalEmployees()void'] | PayrollAppArgs['tuple']['getTotalEmployees()void']>): PayrollAppComposer<[...TReturns, PayrollAppReturns['getTotalEmployees()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PayrollApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PayrollAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PayrollAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PayrollAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PayrollAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PayrollAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PayrollAppComposerResults<TReturns>>
}
export type PayrollAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

