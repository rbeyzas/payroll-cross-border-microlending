#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    bytecblock 0x151f7c75000130
    // smart_contracts/microloan_app/contract.algo.ts:3
    // export class MicroloanApp extends Contract {
    txn NumAppArgs
    bz main_bare_routing@14
    pushbytess 0x1c7d1168 0xed3fff39 0x5e974f46 0x797c3255 0x0e1d1109 0x2cdbd557 0xad0a74b3 0x948595cd 0x89505fa8 // method "requestLoan(string,string)string", method "approveLoan(string,string)void", method "drawdown(string)void", method "repay(string)void", method "fundApp(string)void", method "markDefault(string)void", method "getLoanInfo(string)string", method "getTotalLoans()string", method "getAdmin()string"
    txna ApplicationArgs 0
    match main_requestLoan_route@3 main_approveLoan_route@4 main_drawdown_route@5 main_repay_route@6 main_fundApp_route@7 main_markDefault_route@8 main_getLoanInfo_route@9 main_getTotalLoans_route@10 main_getAdmin_route@11

main_after_if_else@18:
    // smart_contracts/microloan_app/contract.algo.ts:3
    // export class MicroloanApp extends Contract {
    pushint 0 // 0
    return

main_getAdmin_route@11:
    // smart_contracts/microloan_app/contract.algo.ts:78
    // public getAdmin(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c750000
    log
    intc_0 // 1
    return

main_getTotalLoans_route@10:
    // smart_contracts/microloan_app/contract.algo.ts:69
    // public getTotalLoans(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75000130
    log
    intc_0 // 1
    return

main_getLoanInfo_route@9:
    // smart_contracts/microloan_app/contract.algo.ts:60
    // public getLoanInfo(loanId: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7500096e6f745f666f756e64
    log
    intc_0 // 1
    return

main_markDefault_route@8:
    // smart_contracts/microloan_app/contract.algo.ts:51
    // public markDefault(loanId: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_fundApp_route@7:
    // smart_contracts/microloan_app/contract.algo.ts:43
    // public fundApp(amount: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_repay_route@6:
    // smart_contracts/microloan_app/contract.algo.ts:35
    // public repay(loanId: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_drawdown_route@5:
    // smart_contracts/microloan_app/contract.algo.ts:27
    // public drawdown(loanId: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_approveLoan_route@4:
    // smart_contracts/microloan_app/contract.algo.ts:19
    // public approveLoan(loanId: string, installmentAmount: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_requestLoan_route@3:
    // smart_contracts/microloan_app/contract.algo.ts:9
    // public requestLoan(principal: string, termDays: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // 0x151f7c75000130
    log
    intc_0 // 1
    return

main_bare_routing@14:
    // smart_contracts/microloan_app/contract.algo.ts:3
    // export class MicroloanApp extends Contract {
    txn OnCompletion
    bnz main_after_if_else@18
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
