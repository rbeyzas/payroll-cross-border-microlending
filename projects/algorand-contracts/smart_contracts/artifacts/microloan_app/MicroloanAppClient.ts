/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"MicroloanApp","structs":{},"methods":[{"name":"requestLoan","args":[{"type":"string","name":"principal","desc":"Loan amount in microALGO"},{"type":"string","name":"termDays","desc":"Loan term in days"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Request a loan","events":[],"recommendations":{}},{"name":"approveLoan","args":[{"type":"string","name":"loanId","desc":"Loan ID to approve"},{"type":"string","name":"installmentAmount","desc":"Monthly installment amount in microALGO"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Approve a loan (admin only)","events":[],"recommendations":{}},{"name":"drawdown","args":[{"type":"string","name":"loanId","desc":"Loan ID to drawdown"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Drawdown approved loan","events":[],"recommendations":{}},{"name":"repay","args":[{"type":"string","name":"loanId","desc":"Loan ID to repay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Repay loan installment","events":[],"recommendations":{}},{"name":"fundApp","args":[{"type":"string","name":"amount","desc":"Amount to fund in microALGO"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Fund the application with ALGO (admin only)","events":[],"recommendations":{}},{"name":"markDefault","args":[{"type":"string","name":"loanId","desc":"Loan ID to mark as default"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mark loan as defaulted","events":[],"recommendations":{}},{"name":"getLoanInfo","args":[{"type":"string","name":"loanId","desc":"Loan ID to get info"}],"returns":{"type":"string","desc":"Loan info as string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get loan information","events":[],"recommendations":{}},{"name":"getTotalLoans","args":[],"returns":{"type":"string","desc":"Total loans count as string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get total loans count","events":[],"recommendations":{}},{"name":"getAdmin","args":[],"returns":{"type":"string","desc":"Admin address as string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get admin address","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[95,113,124,151,160,169,178,187,196],"errorMessage":"OnCompletion is not NoOp"},{"pc":[212],"errorMessage":"can only call when creating"},{"pc":[98,116,127,154,163,172,181,190,199],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1MDAwMTMwCiAgICAvLyBzbWFydF9jb250cmFjdHMvbWljcm9sb2FuX2FwcC9jb250cmFjdC5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjbGFzcyBNaWNyb2xvYW5BcHAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTQKICAgIHB1c2hieXRlc3MgMHgxYzdkMTE2OCAweGVkM2ZmZjM5IDB4NWU5NzRmNDYgMHg3OTdjMzI1NSAweDBlMWQxMTA5IDB4MmNkYmQ1NTcgMHhhZDBhNzRiMyAweDk0ODU5NWNkIDB4ODk1MDVmYTggLy8gbWV0aG9kICJyZXF1ZXN0TG9hbihzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiYXBwcm92ZUxvYW4oc3RyaW5nLHN0cmluZyl2b2lkIiwgbWV0aG9kICJkcmF3ZG93bihzdHJpbmcpdm9pZCIsIG1ldGhvZCAicmVwYXkoc3RyaW5nKXZvaWQiLCBtZXRob2QgImZ1bmRBcHAoc3RyaW5nKXZvaWQiLCBtZXRob2QgIm1hcmtEZWZhdWx0KHN0cmluZyl2b2lkIiwgbWV0aG9kICJnZXRMb2FuSW5mbyhzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJnZXRUb3RhbExvYW5zKClzdHJpbmciLCBtZXRob2QgImdldEFkbWluKClzdHJpbmciCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3JlcXVlc3RMb2FuX3JvdXRlQDMgbWFpbl9hcHByb3ZlTG9hbl9yb3V0ZUA0IG1haW5fZHJhd2Rvd25fcm91dGVANSBtYWluX3JlcGF5X3JvdXRlQDYgbWFpbl9mdW5kQXBwX3JvdXRlQDcgbWFpbl9tYXJrRGVmYXVsdF9yb3V0ZUA4IG1haW5fZ2V0TG9hbkluZm9fcm91dGVAOSBtYWluX2dldFRvdGFsTG9hbnNfcm91dGVAMTAgbWFpbl9nZXRBZG1pbl9yb3V0ZUAxMQoKbWFpbl9hZnRlcl9pZl9lbHNlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL21pY3JvbG9hbl9hcHAvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgTWljcm9sb2FuQXBwIGV4dGVuZHMgQ29udHJhY3QgewogICAgcHVzaGludCAwIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRBZG1pbl9yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9taWNyb2xvYW5fYXBwL2NvbnRyYWN0LmFsZ28udHM6NzgKICAgIC8vIHB1YmxpYyBnZXRBZG1pbigpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDAKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRUb3RhbExvYW5zX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL21pY3JvbG9hbl9hcHAvY29udHJhY3QuYWxnby50czo2OQogICAgLy8gcHVibGljIGdldFRvdGFsTG9hbnMoKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1MDAwMTMwCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0TG9hbkluZm9fcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9taWNyb2xvYW5fYXBwL2NvbnRyYWN0LmFsZ28udHM6NjAKICAgIC8vIHB1YmxpYyBnZXRMb2FuSW5mbyhsb2FuSWQ6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAwOTZlNmY3NDVmNjY2Zjc1NmU2NAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX21hcmtEZWZhdWx0X3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbWljcm9sb2FuX2FwcC9jb250cmFjdC5hbGdvLnRzOjUxCiAgICAvLyBwdWJsaWMgbWFya0RlZmF1bHQobG9hbklkOiBzdHJpbmcpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9mdW5kQXBwX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbWljcm9sb2FuX2FwcC9jb250cmFjdC5hbGdvLnRzOjQzCiAgICAvLyBwdWJsaWMgZnVuZEFwcChhbW91bnQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlcGF5X3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbWljcm9sb2FuX2FwcC9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBwdWJsaWMgcmVwYXkobG9hbklkOiBzdHJpbmcpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kcmF3ZG93bl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL21pY3JvbG9hbl9hcHAvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gcHVibGljIGRyYXdkb3duKGxvYW5JZDogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYXBwcm92ZUxvYW5fcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9taWNyb2xvYW5fYXBwL2NvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyBhcHByb3ZlTG9hbihsb2FuSWQ6IHN0cmluZywgaW5zdGFsbG1lbnRBbW91bnQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlcXVlc3RMb2FuX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbWljcm9sb2FuX2FwcC9jb250cmFjdC5hbGdvLnRzOjkKICAgIC8vIHB1YmxpYyByZXF1ZXN0TG9hbihwcmluY2lwYWw6IHN0cmluZywgdGVybURheXM6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NTAwMDEzMAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9taWNyb2xvYW5fYXBwL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIE1pY3JvbG9hbkFwcCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTgKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiABASYBBxUffHUAATAxG0EAuYIJBBx9EWgE7T//OQRel09GBHl8MlUEDh0RCQQs29VXBK0KdLMElIWVzQSJUF+oNhoAjgkAaABfAFYATQBEADsAIAAVAAOBAEMxGRREMRhEgAYVH3x1AACwIkMxGRREMRhEKLAiQzEZFEQxGESADxUffHUACW5vdF9mb3VuZLAiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQosCJDMRlA/4gxGBREIkM=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the MicroloanApp contract
 */
export type MicroloanAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'requestLoan(string,string)string': {
      /**
       * Loan amount in microALGO
       */
      principal: string
      /**
       * Loan term in days
       */
      termDays: string
    }
    'approveLoan(string,string)void': {
      /**
       * Loan ID to approve
       */
      loanId: string
      /**
       * Monthly installment amount in microALGO
       */
      installmentAmount: string
    }
    'drawdown(string)void': {
      /**
       * Loan ID to drawdown
       */
      loanId: string
    }
    'repay(string)void': {
      /**
       * Loan ID to repay
       */
      loanId: string
    }
    'fundApp(string)void': {
      /**
       * Amount to fund in microALGO
       */
      amount: string
    }
    'markDefault(string)void': {
      /**
       * Loan ID to mark as default
       */
      loanId: string
    }
    'getLoanInfo(string)string': {
      /**
       * Loan ID to get info
       */
      loanId: string
    }
    'getTotalLoans()string': Record<string, never>
    'getAdmin()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'requestLoan(string,string)string': [principal: string, termDays: string]
    'approveLoan(string,string)void': [loanId: string, installmentAmount: string]
    'drawdown(string)void': [loanId: string]
    'repay(string)void': [loanId: string]
    'fundApp(string)void': [amount: string]
    'markDefault(string)void': [loanId: string]
    'getLoanInfo(string)string': [loanId: string]
    'getTotalLoans()string': []
    'getAdmin()string': []
  }
}

/**
 * The return type for each method
 */
export type MicroloanAppReturns = {
  'requestLoan(string,string)string': string
  'approveLoan(string,string)void': void
  'drawdown(string)void': void
  'repay(string)void': void
  'fundApp(string)void': void
  'markDefault(string)void': void
  'getLoanInfo(string)string': string
  'getTotalLoans()string': string
  'getAdmin()string': string
}

/**
 * Defines the types of available calls and state of the MicroloanApp smart contract.
 */
export type MicroloanAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'requestLoan(string,string)string' | 'requestLoan', {
      argsObj: MicroloanAppArgs['obj']['requestLoan(string,string)string']
      argsTuple: MicroloanAppArgs['tuple']['requestLoan(string,string)string']
      returns: MicroloanAppReturns['requestLoan(string,string)string']
    }>
    & Record<'approveLoan(string,string)void' | 'approveLoan', {
      argsObj: MicroloanAppArgs['obj']['approveLoan(string,string)void']
      argsTuple: MicroloanAppArgs['tuple']['approveLoan(string,string)void']
      returns: MicroloanAppReturns['approveLoan(string,string)void']
    }>
    & Record<'drawdown(string)void' | 'drawdown', {
      argsObj: MicroloanAppArgs['obj']['drawdown(string)void']
      argsTuple: MicroloanAppArgs['tuple']['drawdown(string)void']
      returns: MicroloanAppReturns['drawdown(string)void']
    }>
    & Record<'repay(string)void' | 'repay', {
      argsObj: MicroloanAppArgs['obj']['repay(string)void']
      argsTuple: MicroloanAppArgs['tuple']['repay(string)void']
      returns: MicroloanAppReturns['repay(string)void']
    }>
    & Record<'fundApp(string)void' | 'fundApp', {
      argsObj: MicroloanAppArgs['obj']['fundApp(string)void']
      argsTuple: MicroloanAppArgs['tuple']['fundApp(string)void']
      returns: MicroloanAppReturns['fundApp(string)void']
    }>
    & Record<'markDefault(string)void' | 'markDefault', {
      argsObj: MicroloanAppArgs['obj']['markDefault(string)void']
      argsTuple: MicroloanAppArgs['tuple']['markDefault(string)void']
      returns: MicroloanAppReturns['markDefault(string)void']
    }>
    & Record<'getLoanInfo(string)string' | 'getLoanInfo', {
      argsObj: MicroloanAppArgs['obj']['getLoanInfo(string)string']
      argsTuple: MicroloanAppArgs['tuple']['getLoanInfo(string)string']
      /**
       * Loan info as string
       */
      returns: MicroloanAppReturns['getLoanInfo(string)string']
    }>
    & Record<'getTotalLoans()string' | 'getTotalLoans', {
      argsObj: MicroloanAppArgs['obj']['getTotalLoans()string']
      argsTuple: MicroloanAppArgs['tuple']['getTotalLoans()string']
      /**
       * Total loans count as string
       */
      returns: MicroloanAppReturns['getTotalLoans()string']
    }>
    & Record<'getAdmin()string' | 'getAdmin', {
      argsObj: MicroloanAppArgs['obj']['getAdmin()string']
      argsTuple: MicroloanAppArgs['tuple']['getAdmin()string']
      /**
       * Admin address as string
       */
      returns: MicroloanAppReturns['getAdmin()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type MicroloanAppSignatures = keyof MicroloanAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MicroloanAppNonVoidMethodSignatures = keyof MicroloanAppTypes['methods'] extends infer T ? T extends keyof MicroloanAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the MicroloanApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MicroloanAppSignatures> = MicroloanAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MicroloanApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MicroloanAppSignatures> = MicroloanAppTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type MicroloanAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MicroloanAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MicroloanAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the MicroloanApp smart contract
 */
export abstract class MicroloanAppParamsFactory {
  /**
   * Constructs a no op call for the requestLoan(string,string)string ABI method
   *
   * Request a loan
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static requestLoan(params: CallParams<MicroloanAppArgs['obj']['requestLoan(string,string)string'] | MicroloanAppArgs['tuple']['requestLoan(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'requestLoan(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.principal, params.args.termDays],
    }
  }
  /**
   * Constructs a no op call for the approveLoan(string,string)void ABI method
   *
   * Approve a loan (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveLoan(params: CallParams<MicroloanAppArgs['obj']['approveLoan(string,string)void'] | MicroloanAppArgs['tuple']['approveLoan(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveLoan(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.loanId, params.args.installmentAmount],
    }
  }
  /**
   * Constructs a no op call for the drawdown(string)void ABI method
   *
   * Drawdown approved loan
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static drawdown(params: CallParams<MicroloanAppArgs['obj']['drawdown(string)void'] | MicroloanAppArgs['tuple']['drawdown(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'drawdown(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.loanId],
    }
  }
  /**
   * Constructs a no op call for the repay(string)void ABI method
   *
   * Repay loan installment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static repay(params: CallParams<MicroloanAppArgs['obj']['repay(string)void'] | MicroloanAppArgs['tuple']['repay(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'repay(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.loanId],
    }
  }
  /**
   * Constructs a no op call for the fundApp(string)void ABI method
   *
   * Fund the application with ALGO (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundApp(params: CallParams<MicroloanAppArgs['obj']['fundApp(string)void'] | MicroloanAppArgs['tuple']['fundApp(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundApp(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the markDefault(string)void ABI method
   *
   * Mark loan as defaulted
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static markDefault(params: CallParams<MicroloanAppArgs['obj']['markDefault(string)void'] | MicroloanAppArgs['tuple']['markDefault(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'markDefault(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.loanId],
    }
  }
  /**
   * Constructs a no op call for the getLoanInfo(string)string ABI method
   *
   * Get loan information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanInfo(params: CallParams<MicroloanAppArgs['obj']['getLoanInfo(string)string'] | MicroloanAppArgs['tuple']['getLoanInfo(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanInfo(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.loanId],
    }
  }
  /**
   * Constructs a no op call for the getTotalLoans()string ABI method
   *
   * Get total loans count
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalLoans(params: CallParams<MicroloanAppArgs['obj']['getTotalLoans()string'] | MicroloanAppArgs['tuple']['getTotalLoans()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalLoans()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAdmin()string ABI method
   *
   * Get admin address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAdmin(params: CallParams<MicroloanAppArgs['obj']['getAdmin()string'] | MicroloanAppArgs['tuple']['getAdmin()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAdmin()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the MicroloanApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MicroloanAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MicroloanAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MicroloanAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MicroloanAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the MicroloanApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MicroloanAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new MicroloanAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MicroloanApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MicroloanApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MicroloanApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new MicroloanAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the MicroloanApp smart contract
 */
export class MicroloanAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MicroloanAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the MicroloanApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MicroloanAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MicroloanAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MicroloanAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MicroloanAppClient> {
    return new MicroloanAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MicroloanAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MicroloanAppClient> {
    return new MicroloanAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the MicroloanApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `requestLoan(string,string)string` ABI method.
     *
     * Request a loan
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    requestLoan: (params: CallParams<MicroloanAppArgs['obj']['requestLoan(string,string)string'] | MicroloanAppArgs['tuple']['requestLoan(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.requestLoan(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `approveLoan(string,string)void` ABI method.
     *
     * Approve a loan (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveLoan: (params: CallParams<MicroloanAppArgs['obj']['approveLoan(string,string)void'] | MicroloanAppArgs['tuple']['approveLoan(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.approveLoan(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `drawdown(string)void` ABI method.
     *
     * Drawdown approved loan
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    drawdown: (params: CallParams<MicroloanAppArgs['obj']['drawdown(string)void'] | MicroloanAppArgs['tuple']['drawdown(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.drawdown(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `repay(string)void` ABI method.
     *
     * Repay loan installment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    repay: (params: CallParams<MicroloanAppArgs['obj']['repay(string)void'] | MicroloanAppArgs['tuple']['repay(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.repay(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `fundApp(string)void` ABI method.
     *
     * Fund the application with ALGO (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundApp: (params: CallParams<MicroloanAppArgs['obj']['fundApp(string)void'] | MicroloanAppArgs['tuple']['fundApp(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.fundApp(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `markDefault(string)void` ABI method.
     *
     * Mark loan as defaulted
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    markDefault: (params: CallParams<MicroloanAppArgs['obj']['markDefault(string)void'] | MicroloanAppArgs['tuple']['markDefault(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.markDefault(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getLoanInfo(string)string` ABI method.
     *
     * Get loan information
     *
     * @param params The params for the smart contract call
     * @returns The call params: Loan info as string
     */
    getLoanInfo: (params: CallParams<MicroloanAppArgs['obj']['getLoanInfo(string)string'] | MicroloanAppArgs['tuple']['getLoanInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.getLoanInfo(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getTotalLoans()string` ABI method.
     *
     * Get total loans count
     *
     * @param params The params for the smart contract call
     * @returns The call params: Total loans count as string
     */
    getTotalLoans: (params: CallParams<MicroloanAppArgs['obj']['getTotalLoans()string'] | MicroloanAppArgs['tuple']['getTotalLoans()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.getTotalLoans(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getAdmin()string` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call params: Admin address as string
     */
    getAdmin: (params: CallParams<MicroloanAppArgs['obj']['getAdmin()string'] | MicroloanAppArgs['tuple']['getAdmin()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(MicroloanAppParamsFactory.getAdmin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the MicroloanApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `requestLoan(string,string)string` ABI method.
     *
     * Request a loan
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    requestLoan: (params: CallParams<MicroloanAppArgs['obj']['requestLoan(string,string)string'] | MicroloanAppArgs['tuple']['requestLoan(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.requestLoan(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `approveLoan(string,string)void` ABI method.
     *
     * Approve a loan (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveLoan: (params: CallParams<MicroloanAppArgs['obj']['approveLoan(string,string)void'] | MicroloanAppArgs['tuple']['approveLoan(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.approveLoan(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `drawdown(string)void` ABI method.
     *
     * Drawdown approved loan
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    drawdown: (params: CallParams<MicroloanAppArgs['obj']['drawdown(string)void'] | MicroloanAppArgs['tuple']['drawdown(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.drawdown(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `repay(string)void` ABI method.
     *
     * Repay loan installment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    repay: (params: CallParams<MicroloanAppArgs['obj']['repay(string)void'] | MicroloanAppArgs['tuple']['repay(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.repay(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `fundApp(string)void` ABI method.
     *
     * Fund the application with ALGO (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundApp: (params: CallParams<MicroloanAppArgs['obj']['fundApp(string)void'] | MicroloanAppArgs['tuple']['fundApp(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.fundApp(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `markDefault(string)void` ABI method.
     *
     * Mark loan as defaulted
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    markDefault: (params: CallParams<MicroloanAppArgs['obj']['markDefault(string)void'] | MicroloanAppArgs['tuple']['markDefault(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.markDefault(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getLoanInfo(string)string` ABI method.
     *
     * Get loan information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Loan info as string
     */
    getLoanInfo: (params: CallParams<MicroloanAppArgs['obj']['getLoanInfo(string)string'] | MicroloanAppArgs['tuple']['getLoanInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.getLoanInfo(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getTotalLoans()string` ABI method.
     *
     * Get total loans count
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Total loans count as string
     */
    getTotalLoans: (params: CallParams<MicroloanAppArgs['obj']['getTotalLoans()string'] | MicroloanAppArgs['tuple']['getTotalLoans()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.getTotalLoans(params))
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getAdmin()string` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Admin address as string
     */
    getAdmin: (params: CallParams<MicroloanAppArgs['obj']['getAdmin()string'] | MicroloanAppArgs['tuple']['getAdmin()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(MicroloanAppParamsFactory.getAdmin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the MicroloanApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `requestLoan(string,string)string` ABI method.
     *
     * Request a loan
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    requestLoan: async (params: CallParams<MicroloanAppArgs['obj']['requestLoan(string,string)string'] | MicroloanAppArgs['tuple']['requestLoan(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.requestLoan(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['requestLoan(string,string)string'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `approveLoan(string,string)void` ABI method.
     *
     * Approve a loan (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveLoan: async (params: CallParams<MicroloanAppArgs['obj']['approveLoan(string,string)void'] | MicroloanAppArgs['tuple']['approveLoan(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.approveLoan(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['approveLoan(string,string)void'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `drawdown(string)void` ABI method.
     *
     * Drawdown approved loan
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    drawdown: async (params: CallParams<MicroloanAppArgs['obj']['drawdown(string)void'] | MicroloanAppArgs['tuple']['drawdown(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.drawdown(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['drawdown(string)void'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `repay(string)void` ABI method.
     *
     * Repay loan installment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    repay: async (params: CallParams<MicroloanAppArgs['obj']['repay(string)void'] | MicroloanAppArgs['tuple']['repay(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.repay(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['repay(string)void'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `fundApp(string)void` ABI method.
     *
     * Fund the application with ALGO (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundApp: async (params: CallParams<MicroloanAppArgs['obj']['fundApp(string)void'] | MicroloanAppArgs['tuple']['fundApp(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.fundApp(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['fundApp(string)void'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `markDefault(string)void` ABI method.
     *
     * Mark loan as defaulted
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    markDefault: async (params: CallParams<MicroloanAppArgs['obj']['markDefault(string)void'] | MicroloanAppArgs['tuple']['markDefault(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.markDefault(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['markDefault(string)void'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getLoanInfo(string)string` ABI method.
     *
     * Get loan information
     *
     * @param params The params for the smart contract call
     * @returns The call result: Loan info as string
     */
    getLoanInfo: async (params: CallParams<MicroloanAppArgs['obj']['getLoanInfo(string)string'] | MicroloanAppArgs['tuple']['getLoanInfo(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.getLoanInfo(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['getLoanInfo(string)string'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getTotalLoans()string` ABI method.
     *
     * Get total loans count
     *
     * @param params The params for the smart contract call
     * @returns The call result: Total loans count as string
     */
    getTotalLoans: async (params: CallParams<MicroloanAppArgs['obj']['getTotalLoans()string'] | MicroloanAppArgs['tuple']['getTotalLoans()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.getTotalLoans(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['getTotalLoans()string'])}
    },

    /**
     * Makes a call to the MicroloanApp smart contract using the `getAdmin()string` ABI method.
     *
     * Get admin address
     *
     * @param params The params for the smart contract call
     * @returns The call result: Admin address as string
     */
    getAdmin: async (params: CallParams<MicroloanAppArgs['obj']['getAdmin()string'] | MicroloanAppArgs['tuple']['getAdmin()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(MicroloanAppParamsFactory.getAdmin(params))
      return {...result, return: result.return as unknown as (undefined | MicroloanAppReturns['getAdmin()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MicroloanAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current MicroloanApp app
   */
  state = {
  }

  public newGroup(): MicroloanAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a requestLoan(string,string)string method call against the MicroloanApp contract
       */
      requestLoan(params: CallParams<MicroloanAppArgs['obj']['requestLoan(string,string)string'] | MicroloanAppArgs['tuple']['requestLoan(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.requestLoan(params)))
        resultMappers.push((v) => client.decodeReturnValue('requestLoan(string,string)string', v))
        return this
      },
      /**
       * Add a approveLoan(string,string)void method call against the MicroloanApp contract
       */
      approveLoan(params: CallParams<MicroloanAppArgs['obj']['approveLoan(string,string)void'] | MicroloanAppArgs['tuple']['approveLoan(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveLoan(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a drawdown(string)void method call against the MicroloanApp contract
       */
      drawdown(params: CallParams<MicroloanAppArgs['obj']['drawdown(string)void'] | MicroloanAppArgs['tuple']['drawdown(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.drawdown(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a repay(string)void method call against the MicroloanApp contract
       */
      repay(params: CallParams<MicroloanAppArgs['obj']['repay(string)void'] | MicroloanAppArgs['tuple']['repay(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.repay(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fundApp(string)void method call against the MicroloanApp contract
       */
      fundApp(params: CallParams<MicroloanAppArgs['obj']['fundApp(string)void'] | MicroloanAppArgs['tuple']['fundApp(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a markDefault(string)void method call against the MicroloanApp contract
       */
      markDefault(params: CallParams<MicroloanAppArgs['obj']['markDefault(string)void'] | MicroloanAppArgs['tuple']['markDefault(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.markDefault(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLoanInfo(string)string method call against the MicroloanApp contract
       */
      getLoanInfo(params: CallParams<MicroloanAppArgs['obj']['getLoanInfo(string)string'] | MicroloanAppArgs['tuple']['getLoanInfo(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanInfo(string)string', v))
        return this
      },
      /**
       * Add a getTotalLoans()string method call against the MicroloanApp contract
       */
      getTotalLoans(params: CallParams<MicroloanAppArgs['obj']['getTotalLoans()string'] | MicroloanAppArgs['tuple']['getTotalLoans()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalLoans(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalLoans()string', v))
        return this
      },
      /**
       * Add a getAdmin()string method call against the MicroloanApp contract
       */
      getAdmin(params: CallParams<MicroloanAppArgs['obj']['getAdmin()string'] | MicroloanAppArgs['tuple']['getAdmin()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAdmin()string', v))
        return this
      },
      /**
       * Add a clear state call to the MicroloanApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MicroloanAppComposer
  }
}
export type MicroloanAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the requestLoan(string,string)string ABI method.
   *
   * Request a loan
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestLoan(params?: CallParams<MicroloanAppArgs['obj']['requestLoan(string,string)string'] | MicroloanAppArgs['tuple']['requestLoan(string,string)string']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['requestLoan(string,string)string'] | undefined]>

  /**
   * Calls the approveLoan(string,string)void ABI method.
   *
   * Approve a loan (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveLoan(params?: CallParams<MicroloanAppArgs['obj']['approveLoan(string,string)void'] | MicroloanAppArgs['tuple']['approveLoan(string,string)void']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['approveLoan(string,string)void'] | undefined]>

  /**
   * Calls the drawdown(string)void ABI method.
   *
   * Drawdown approved loan
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  drawdown(params?: CallParams<MicroloanAppArgs['obj']['drawdown(string)void'] | MicroloanAppArgs['tuple']['drawdown(string)void']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['drawdown(string)void'] | undefined]>

  /**
   * Calls the repay(string)void ABI method.
   *
   * Repay loan installment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  repay(params?: CallParams<MicroloanAppArgs['obj']['repay(string)void'] | MicroloanAppArgs['tuple']['repay(string)void']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['repay(string)void'] | undefined]>

  /**
   * Calls the fundApp(string)void ABI method.
   *
   * Fund the application with ALGO (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundApp(params?: CallParams<MicroloanAppArgs['obj']['fundApp(string)void'] | MicroloanAppArgs['tuple']['fundApp(string)void']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['fundApp(string)void'] | undefined]>

  /**
   * Calls the markDefault(string)void ABI method.
   *
   * Mark loan as defaulted
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  markDefault(params?: CallParams<MicroloanAppArgs['obj']['markDefault(string)void'] | MicroloanAppArgs['tuple']['markDefault(string)void']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['markDefault(string)void'] | undefined]>

  /**
   * Calls the getLoanInfo(string)string ABI method.
   *
   * Get loan information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanInfo(params?: CallParams<MicroloanAppArgs['obj']['getLoanInfo(string)string'] | MicroloanAppArgs['tuple']['getLoanInfo(string)string']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['getLoanInfo(string)string'] | undefined]>

  /**
   * Calls the getTotalLoans()string ABI method.
   *
   * Get total loans count
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalLoans(params?: CallParams<MicroloanAppArgs['obj']['getTotalLoans()string'] | MicroloanAppArgs['tuple']['getTotalLoans()string']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['getTotalLoans()string'] | undefined]>

  /**
   * Calls the getAdmin()string ABI method.
   *
   * Get admin address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAdmin(params?: CallParams<MicroloanAppArgs['obj']['getAdmin()string'] | MicroloanAppArgs['tuple']['getAdmin()string']>): MicroloanAppComposer<[...TReturns, MicroloanAppReturns['getAdmin()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the MicroloanApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MicroloanAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MicroloanAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MicroloanAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MicroloanAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MicroloanAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MicroloanAppComposerResults<TReturns>>
}
export type MicroloanAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

