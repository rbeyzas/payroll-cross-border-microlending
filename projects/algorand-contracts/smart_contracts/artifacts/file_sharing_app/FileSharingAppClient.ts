/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"FileSharingApp","structs":{},"methods":[{"name":"initialize","args":[{"type":"string","name":"adminAddress","desc":"Admin address who can manage the system"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the file sharing application","events":[],"recommendations":{}},{"name":"createFileRequest","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"},{"type":"string","name":"recipientAddress","desc":"Recipient's Algorand address"},{"type":"string","name":"fileHash","desc":"SHA256 hash of the file content"},{"type":"string","name":"fileSize","desc":"Size of the file in bytes"},{"type":"string","name":"accessFee","desc":"Fee required to access the file (in microALGO)"},{"type":"string","name":"fileType","desc":"Type of file (e.g., \"payslip\", \"contract\", \"document\")"},{"type":"string","name":"isIPFS","desc":"Whether file is stored on IPFS (true) or WebRTC (false)"},{"type":"string","name":"ipfsCID","desc":"IPFS Content ID (empty string if WebRTC)"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a file sharing request with escrow","events":[],"recommendations":{}},{"name":"approveAndPay","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Recipient approves and pays for file access","events":[],"recommendations":{}},{"name":"confirmReceipt","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"},{"type":"string","name":"confirmationHash","desc":"Hash of the received file for verification"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Recipient confirms file receipt and releases payment","events":[],"recommendations":{}},{"name":"disputeTransfer","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"},{"type":"string","name":"reason","desc":"Reason for dispute"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Dispute file transfer - can be called by either party","events":[],"recommendations":{}},{"name":"resolveDispute","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"},{"type":"string","name":"resolution","desc":"Resolution: \"sender_wins\" or \"recipient_wins\""}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Admin resolves dispute","events":[],"recommendations":{}},{"name":"cancelRequest","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cancel file request (only by sender before approval)","events":[],"recommendations":{}},{"name":"getFileRequest","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"}],"returns":{"type":"string","desc":"File request info as JSON string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get file request information","events":[],"recommendations":{}},{"name":"getUserFileRequests","args":[{"type":"string","name":"userAddress","desc":"User's Algorand address"}],"returns":{"type":"string","desc":"List of file requests as JSON string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all file requests for a user (sender or recipient)","events":[],"recommendations":{}},{"name":"updateFileMetadata","args":[{"type":"string","name":"fileId","desc":"Unique identifier for the file"},{"type":"string","name":"newFileHash","desc":"New file hash"},{"type":"string","name":"newFileSize","desc":"New file size"},{"type":"string","name":"newAccessFee","desc":"New access fee"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update file metadata (only by sender before approval)","events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[{"type":"string","name":"amount","desc":"Amount to withdraw in microALGO"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency withdrawal by admin (for stuck funds)","events":[],"recommendations":{}},{"name":"getStats","args":[],"returns":{"type":"string","desc":"Statistics as JSON string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get application statistics","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[106,126,135,144,164,191,200,209,218,227,236,245],"errorMessage":"OnCompletion is not NoOp"},{"pc":[259],"errorMessage":"can only call when creating"},{"pc":[109,129,138,147,167,194,203,212,221,230,239,248],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpbGVfc2hhcmluZ19hcHAvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgRmlsZVNoYXJpbmdBcHAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTcKICAgIHB1c2hieXRlc3MgMHhlY2YzMzllNyAweDg1MzVjZmI3IDB4ZjE0OWVkMzggMHhmODM4Y2VkNCAweGU2YjBhZWE2IDB4NTJiZWZkYzYgMHg2NGE3ZWVjMCAweGYzMDQyNWNlIDB4ZjIxYzM1OWMgMHgwMDJjN2M4MyAweGZmNzgwOTQ0IDB4ZWU1OWMyMTEgLy8gbWV0aG9kICJpbml0aWFsaXplKHN0cmluZyl2b2lkIiwgbWV0aG9kICJjcmVhdGVGaWxlUmVxdWVzdChzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nKXZvaWQiLCBtZXRob2QgImFwcHJvdmVBbmRQYXkoc3RyaW5nKXZvaWQiLCBtZXRob2QgImNvbmZpcm1SZWNlaXB0KHN0cmluZyxzdHJpbmcpdm9pZCIsIG1ldGhvZCAiZGlzcHV0ZVRyYW5zZmVyKHN0cmluZyxzdHJpbmcpdm9pZCIsIG1ldGhvZCAicmVzb2x2ZURpc3B1dGUoc3RyaW5nLHN0cmluZyl2b2lkIiwgbWV0aG9kICJjYW5jZWxSZXF1ZXN0KHN0cmluZyl2b2lkIiwgbWV0aG9kICJnZXRGaWxlUmVxdWVzdChzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJnZXRVc2VyRmlsZVJlcXVlc3RzKHN0cmluZylzdHJpbmciLCBtZXRob2QgInVwZGF0ZUZpbGVNZXRhZGF0YShzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcpdm9pZCIsIG1ldGhvZCAiZW1lcmdlbmN5V2l0aGRyYXcoc3RyaW5nKXZvaWQiLCBtZXRob2QgImdldFN0YXRzKClzdHJpbmciCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2luaXRpYWxpemVfcm91dGVAMyBtYWluX2NyZWF0ZUZpbGVSZXF1ZXN0X3JvdXRlQDQgbWFpbl9hcHByb3ZlQW5kUGF5X3JvdXRlQDUgbWFpbl9jb25maXJtUmVjZWlwdF9yb3V0ZUA2IG1haW5fZGlzcHV0ZVRyYW5zZmVyX3JvdXRlQDcgbWFpbl9yZXNvbHZlRGlzcHV0ZV9yb3V0ZUA4IG1haW5fY2FuY2VsUmVxdWVzdF9yb3V0ZUA5IG1haW5fZ2V0RmlsZVJlcXVlc3Rfcm91dGVAMTAgbWFpbl9nZXRVc2VyRmlsZVJlcXVlc3RzX3JvdXRlQDExIG1haW5fdXBkYXRlRmlsZU1ldGFkYXRhX3JvdXRlQDEyIG1haW5fZW1lcmdlbmN5V2l0aGRyYXdfcm91dGVAMTMgbWFpbl9nZXRTdGF0c19yb3V0ZUAxNAoKbWFpbl9hZnRlcl9pZl9lbHNlQDIxOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpbGVfc2hhcmluZ19hcHAvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgRmlsZVNoYXJpbmdBcHAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBwdXNoaW50IDAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldFN0YXRzX3JvdXRlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpbGVfc2hhcmluZ19hcHAvY29udHJhY3QuYWxnby50czoxMjIKICAgIC8vIHB1YmxpYyBnZXRTdGF0cygpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDI3YjdkCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZW1lcmdlbmN5V2l0aGRyYXdfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmlsZV9zaGFyaW5nX2FwcC9jb250cmFjdC5hbGdvLnRzOjExNAogICAgLy8gcHVibGljIGVtZXJnZW5jeVdpdGhkcmF3KGFtb3VudDogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlRmlsZU1ldGFkYXRhX3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpbGVfc2hhcmluZ19hcHAvY29udHJhY3QuYWxnby50czoxMDYKICAgIC8vIHB1YmxpYyB1cGRhdGVGaWxlTWV0YWRhdGEoZmlsZUlkOiBzdHJpbmcsIG5ld0ZpbGVIYXNoOiBzdHJpbmcsIG5ld0ZpbGVTaXplOiBzdHJpbmcsIG5ld0FjY2Vzc0ZlZTogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0VXNlckZpbGVSZXF1ZXN0c19yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maWxlX3NoYXJpbmdfYXBwL2NvbnRyYWN0LmFsZ28udHM6OTQKICAgIC8vIHB1YmxpYyBnZXRVc2VyRmlsZVJlcXVlc3RzKHVzZXJBZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDI1YjVkCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0RmlsZVJlcXVlc3Rfcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmlsZV9zaGFyaW5nX2FwcC9jb250cmFjdC5hbGdvLnRzOjg0CiAgICAvLyBwdWJsaWMgZ2V0RmlsZVJlcXVlc3QoZmlsZUlkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDk2ZTZmNzQ1ZjY2NmY3NTZlNjQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9jYW5jZWxSZXF1ZXN0X3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmlsZV9zaGFyaW5nX2FwcC9jb250cmFjdC5hbGdvLnRzOjc1CiAgICAvLyBwdWJsaWMgY2FuY2VsUmVxdWVzdChmaWxlSWQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3Jlc29sdmVEaXNwdXRlX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmlsZV9zaGFyaW5nX2FwcC9jb250cmFjdC5hbGdvLnRzOjY3CiAgICAvLyBwdWJsaWMgcmVzb2x2ZURpc3B1dGUoZmlsZUlkOiBzdHJpbmcsIHJlc29sdXRpb246IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2Rpc3B1dGVUcmFuc2Zlcl9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpbGVfc2hhcmluZ19hcHAvY29udHJhY3QuYWxnby50czo1OAogICAgLy8gcHVibGljIGRpc3B1dGVUcmFuc2ZlcihmaWxlSWQ6IHN0cmluZywgcmVhc29uOiBzdHJpbmcpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9jb25maXJtUmVjZWlwdF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpbGVfc2hhcmluZ19hcHAvY29udHJhY3QuYWxnby50czo0OQogICAgLy8gcHVibGljIGNvbmZpcm1SZWNlaXB0KGZpbGVJZDogc3RyaW5nLCBjb25maXJtYXRpb25IYXNoOiBzdHJpbmcpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcHByb3ZlQW5kUGF5X3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmlsZV9zaGFyaW5nX2FwcC9jb250cmFjdC5hbGdvLnRzOjQwCiAgICAvLyBwdWJsaWMgYXBwcm92ZUFuZFBheShmaWxlSWQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZUZpbGVSZXF1ZXN0X3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmlsZV9zaGFyaW5nX2FwcC9jb250cmFjdC5hbGdvLnRzOjIzLTMyCiAgICAvLyBwdWJsaWMgY3JlYXRlRmlsZVJlcXVlc3QoCiAgICAvLyAgIGZpbGVJZDogc3RyaW5nLAogICAgLy8gICByZWNpcGllbnRBZGRyZXNzOiBzdHJpbmcsCiAgICAvLyAgIGZpbGVIYXNoOiBzdHJpbmcsCiAgICAvLyAgIGZpbGVTaXplOiBzdHJpbmcsCiAgICAvLyAgIGFjY2Vzc0ZlZTogc3RyaW5nLAogICAgLy8gICBmaWxlVHlwZTogc3RyaW5nLAogICAgLy8gICBpc0lQRlM6IHN0cmluZywKICAgIC8vICAgaXBmc0NJRDogc3RyaW5nLAogICAgLy8gKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5faW5pdGlhbGl6ZV9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZpbGVfc2hhcmluZ19hcHAvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBwdWJsaWMgaW5pdGlhbGl6ZShhZG1pbkFkZHJlc3M6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9maWxlX3NoYXJpbmdfYXBwL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIEZpbGVTaGFyaW5nQXBwIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4K","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiABATEbQQDyggwE7PM55wSFNc+3BPFJ7TgE+DjO1ATmsK6mBFK+/cYEZKfuwATzBCXOBPIcNZwEACx8gwT/eAlEBO5ZwhE2GgCODACOAIUAfABzAGoAYQBYAD0AKQAgABcAA4EAQzEZFEQxGESACBUffHUAAnt9sCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRIAIFR98dQACW12wIkMxGRREMRhEgA8VH3x1AAlub3RfZm91bmSwIkMxGRREMRhEIkMxGRREMRhEIkMxGRREMRhEIkMxGRREMRhEIkMxGRREMRhEIkMxGRREMRhEIkMxGRREMRhEIkMxGUD/ZDEYFEQiQw==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the FileSharingApp contract
 */
export type FileSharingAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(string)void': {
      /**
       * Admin address who can manage the system
       */
      adminAddress: string
    }
    'createFileRequest(string,string,string,string,string,string,string,string)void': {
      /**
       * Unique identifier for the file
       */
      fileId: string
      /**
       * Recipient's Algorand address
       */
      recipientAddress: string
      /**
       * SHA256 hash of the file content
       */
      fileHash: string
      /**
       * Size of the file in bytes
       */
      fileSize: string
      /**
       * Fee required to access the file (in microALGO)
       */
      accessFee: string
      /**
       * Type of file (e.g., "payslip", "contract", "document")
       */
      fileType: string
      /**
       * Whether file is stored on IPFS (true) or WebRTC (false)
       */
      isIpfs: string
      /**
       * IPFS Content ID (empty string if WebRTC)
       */
      ipfsCid: string
    }
    'approveAndPay(string)void': {
      /**
       * Unique identifier for the file
       */
      fileId: string
    }
    'confirmReceipt(string,string)void': {
      /**
       * Unique identifier for the file
       */
      fileId: string
      /**
       * Hash of the received file for verification
       */
      confirmationHash: string
    }
    'disputeTransfer(string,string)void': {
      /**
       * Unique identifier for the file
       */
      fileId: string
      /**
       * Reason for dispute
       */
      reason: string
    }
    'resolveDispute(string,string)void': {
      /**
       * Unique identifier for the file
       */
      fileId: string
      /**
       * Resolution: "sender_wins" or "recipient_wins"
       */
      resolution: string
    }
    'cancelRequest(string)void': {
      /**
       * Unique identifier for the file
       */
      fileId: string
    }
    'getFileRequest(string)string': {
      /**
       * Unique identifier for the file
       */
      fileId: string
    }
    'getUserFileRequests(string)string': {
      /**
       * User's Algorand address
       */
      userAddress: string
    }
    'updateFileMetadata(string,string,string,string)void': {
      /**
       * Unique identifier for the file
       */
      fileId: string
      /**
       * New file hash
       */
      newFileHash: string
      /**
       * New file size
       */
      newFileSize: string
      /**
       * New access fee
       */
      newAccessFee: string
    }
    'emergencyWithdraw(string)void': {
      /**
       * Amount to withdraw in microALGO
       */
      amount: string
    }
    'getStats()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(string)void': [adminAddress: string]
    'createFileRequest(string,string,string,string,string,string,string,string)void': [fileId: string, recipientAddress: string, fileHash: string, fileSize: string, accessFee: string, fileType: string, isIpfs: string, ipfsCid: string]
    'approveAndPay(string)void': [fileId: string]
    'confirmReceipt(string,string)void': [fileId: string, confirmationHash: string]
    'disputeTransfer(string,string)void': [fileId: string, reason: string]
    'resolveDispute(string,string)void': [fileId: string, resolution: string]
    'cancelRequest(string)void': [fileId: string]
    'getFileRequest(string)string': [fileId: string]
    'getUserFileRequests(string)string': [userAddress: string]
    'updateFileMetadata(string,string,string,string)void': [fileId: string, newFileHash: string, newFileSize: string, newAccessFee: string]
    'emergencyWithdraw(string)void': [amount: string]
    'getStats()string': []
  }
}

/**
 * The return type for each method
 */
export type FileSharingAppReturns = {
  'initialize(string)void': void
  'createFileRequest(string,string,string,string,string,string,string,string)void': void
  'approveAndPay(string)void': void
  'confirmReceipt(string,string)void': void
  'disputeTransfer(string,string)void': void
  'resolveDispute(string,string)void': void
  'cancelRequest(string)void': void
  'getFileRequest(string)string': string
  'getUserFileRequests(string)string': string
  'updateFileMetadata(string,string,string,string)void': void
  'emergencyWithdraw(string)void': void
  'getStats()string': string
}

/**
 * Defines the types of available calls and state of the FileSharingApp smart contract.
 */
export type FileSharingAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(string)void' | 'initialize', {
      argsObj: FileSharingAppArgs['obj']['initialize(string)void']
      argsTuple: FileSharingAppArgs['tuple']['initialize(string)void']
      returns: FileSharingAppReturns['initialize(string)void']
    }>
    & Record<'createFileRequest(string,string,string,string,string,string,string,string)void' | 'createFileRequest', {
      argsObj: FileSharingAppArgs['obj']['createFileRequest(string,string,string,string,string,string,string,string)void']
      argsTuple: FileSharingAppArgs['tuple']['createFileRequest(string,string,string,string,string,string,string,string)void']
      returns: FileSharingAppReturns['createFileRequest(string,string,string,string,string,string,string,string)void']
    }>
    & Record<'approveAndPay(string)void' | 'approveAndPay', {
      argsObj: FileSharingAppArgs['obj']['approveAndPay(string)void']
      argsTuple: FileSharingAppArgs['tuple']['approveAndPay(string)void']
      returns: FileSharingAppReturns['approveAndPay(string)void']
    }>
    & Record<'confirmReceipt(string,string)void' | 'confirmReceipt', {
      argsObj: FileSharingAppArgs['obj']['confirmReceipt(string,string)void']
      argsTuple: FileSharingAppArgs['tuple']['confirmReceipt(string,string)void']
      returns: FileSharingAppReturns['confirmReceipt(string,string)void']
    }>
    & Record<'disputeTransfer(string,string)void' | 'disputeTransfer', {
      argsObj: FileSharingAppArgs['obj']['disputeTransfer(string,string)void']
      argsTuple: FileSharingAppArgs['tuple']['disputeTransfer(string,string)void']
      returns: FileSharingAppReturns['disputeTransfer(string,string)void']
    }>
    & Record<'resolveDispute(string,string)void' | 'resolveDispute', {
      argsObj: FileSharingAppArgs['obj']['resolveDispute(string,string)void']
      argsTuple: FileSharingAppArgs['tuple']['resolveDispute(string,string)void']
      returns: FileSharingAppReturns['resolveDispute(string,string)void']
    }>
    & Record<'cancelRequest(string)void' | 'cancelRequest', {
      argsObj: FileSharingAppArgs['obj']['cancelRequest(string)void']
      argsTuple: FileSharingAppArgs['tuple']['cancelRequest(string)void']
      returns: FileSharingAppReturns['cancelRequest(string)void']
    }>
    & Record<'getFileRequest(string)string' | 'getFileRequest', {
      argsObj: FileSharingAppArgs['obj']['getFileRequest(string)string']
      argsTuple: FileSharingAppArgs['tuple']['getFileRequest(string)string']
      /**
       * File request info as JSON string
       */
      returns: FileSharingAppReturns['getFileRequest(string)string']
    }>
    & Record<'getUserFileRequests(string)string' | 'getUserFileRequests', {
      argsObj: FileSharingAppArgs['obj']['getUserFileRequests(string)string']
      argsTuple: FileSharingAppArgs['tuple']['getUserFileRequests(string)string']
      /**
       * List of file requests as JSON string
       */
      returns: FileSharingAppReturns['getUserFileRequests(string)string']
    }>
    & Record<'updateFileMetadata(string,string,string,string)void' | 'updateFileMetadata', {
      argsObj: FileSharingAppArgs['obj']['updateFileMetadata(string,string,string,string)void']
      argsTuple: FileSharingAppArgs['tuple']['updateFileMetadata(string,string,string,string)void']
      returns: FileSharingAppReturns['updateFileMetadata(string,string,string,string)void']
    }>
    & Record<'emergencyWithdraw(string)void' | 'emergencyWithdraw', {
      argsObj: FileSharingAppArgs['obj']['emergencyWithdraw(string)void']
      argsTuple: FileSharingAppArgs['tuple']['emergencyWithdraw(string)void']
      returns: FileSharingAppReturns['emergencyWithdraw(string)void']
    }>
    & Record<'getStats()string' | 'getStats', {
      argsObj: FileSharingAppArgs['obj']['getStats()string']
      argsTuple: FileSharingAppArgs['tuple']['getStats()string']
      /**
       * Statistics as JSON string
       */
      returns: FileSharingAppReturns['getStats()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type FileSharingAppSignatures = keyof FileSharingAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FileSharingAppNonVoidMethodSignatures = keyof FileSharingAppTypes['methods'] extends infer T ? T extends keyof FileSharingAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FileSharingApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FileSharingAppSignatures> = FileSharingAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FileSharingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FileSharingAppSignatures> = FileSharingAppTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type FileSharingAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FileSharingAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FileSharingAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FileSharingApp smart contract
 */
export abstract class FileSharingAppParamsFactory {
  /**
   * Constructs a no op call for the initialize(string)void ABI method
   *
   * Initialize the file sharing application
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<FileSharingAppArgs['obj']['initialize(string)void'] | FileSharingAppArgs['tuple']['initialize(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.adminAddress],
    }
  }
  /**
   * Constructs a no op call for the createFileRequest(string,string,string,string,string,string,string,string)void ABI method
   *
   * Create a file sharing request with escrow
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createFileRequest(params: CallParams<FileSharingAppArgs['obj']['createFileRequest(string,string,string,string,string,string,string,string)void'] | FileSharingAppArgs['tuple']['createFileRequest(string,string,string,string,string,string,string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createFileRequest(string,string,string,string,string,string,string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId, params.args.recipientAddress, params.args.fileHash, params.args.fileSize, params.args.accessFee, params.args.fileType, params.args.isIpfs, params.args.ipfsCid],
    }
  }
  /**
   * Constructs a no op call for the approveAndPay(string)void ABI method
   *
   * Recipient approves and pays for file access
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveAndPay(params: CallParams<FileSharingAppArgs['obj']['approveAndPay(string)void'] | FileSharingAppArgs['tuple']['approveAndPay(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveAndPay(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId],
    }
  }
  /**
   * Constructs a no op call for the confirmReceipt(string,string)void ABI method
   *
   * Recipient confirms file receipt and releases payment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static confirmReceipt(params: CallParams<FileSharingAppArgs['obj']['confirmReceipt(string,string)void'] | FileSharingAppArgs['tuple']['confirmReceipt(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'confirmReceipt(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId, params.args.confirmationHash],
    }
  }
  /**
   * Constructs a no op call for the disputeTransfer(string,string)void ABI method
   *
   * Dispute file transfer - can be called by either party
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static disputeTransfer(params: CallParams<FileSharingAppArgs['obj']['disputeTransfer(string,string)void'] | FileSharingAppArgs['tuple']['disputeTransfer(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'disputeTransfer(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId, params.args.reason],
    }
  }
  /**
   * Constructs a no op call for the resolveDispute(string,string)void ABI method
   *
   * Admin resolves dispute
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resolveDispute(params: CallParams<FileSharingAppArgs['obj']['resolveDispute(string,string)void'] | FileSharingAppArgs['tuple']['resolveDispute(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resolveDispute(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId, params.args.resolution],
    }
  }
  /**
   * Constructs a no op call for the cancelRequest(string)void ABI method
   *
   * Cancel file request (only by sender before approval)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelRequest(params: CallParams<FileSharingAppArgs['obj']['cancelRequest(string)void'] | FileSharingAppArgs['tuple']['cancelRequest(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelRequest(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId],
    }
  }
  /**
   * Constructs a no op call for the getFileRequest(string)string ABI method
   *
   * Get file request information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getFileRequest(params: CallParams<FileSharingAppArgs['obj']['getFileRequest(string)string'] | FileSharingAppArgs['tuple']['getFileRequest(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getFileRequest(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId],
    }
  }
  /**
   * Constructs a no op call for the getUserFileRequests(string)string ABI method
   *
   * Get all file requests for a user (sender or recipient)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserFileRequests(params: CallParams<FileSharingAppArgs['obj']['getUserFileRequests(string)string'] | FileSharingAppArgs['tuple']['getUserFileRequests(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserFileRequests(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateFileMetadata(string,string,string,string)void ABI method
   *
   * Update file metadata (only by sender before approval)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateFileMetadata(params: CallParams<FileSharingAppArgs['obj']['updateFileMetadata(string,string,string,string)void'] | FileSharingAppArgs['tuple']['updateFileMetadata(string,string,string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateFileMetadata(string,string,string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fileId, params.args.newFileHash, params.args.newFileSize, params.args.newAccessFee],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw(string)void ABI method
   *
   * Emergency withdrawal by admin (for stuck funds)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<FileSharingAppArgs['obj']['emergencyWithdraw(string)void'] | FileSharingAppArgs['tuple']['emergencyWithdraw(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getStats()string ABI method
   *
   * Get application statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStats(params: CallParams<FileSharingAppArgs['obj']['getStats()string'] | FileSharingAppArgs['tuple']['getStats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getStats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FileSharingApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FileSharingAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FileSharingAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FileSharingAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FileSharingAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FileSharingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FileSharingAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FileSharingAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FileSharingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FileSharingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FileSharingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FileSharingAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FileSharingApp smart contract
 */
export class FileSharingAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FileSharingAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FileSharingApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FileSharingAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FileSharingAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FileSharingAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FileSharingAppClient> {
    return new FileSharingAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FileSharingAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FileSharingAppClient> {
    return new FileSharingAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FileSharingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `initialize(string)void` ABI method.
     *
     * Initialize the file sharing application
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<FileSharingAppArgs['obj']['initialize(string)void'] | FileSharingAppArgs['tuple']['initialize(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `createFileRequest(string,string,string,string,string,string,string,string)void` ABI method.
     *
     * Create a file sharing request with escrow
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createFileRequest: (params: CallParams<FileSharingAppArgs['obj']['createFileRequest(string,string,string,string,string,string,string,string)void'] | FileSharingAppArgs['tuple']['createFileRequest(string,string,string,string,string,string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.createFileRequest(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `approveAndPay(string)void` ABI method.
     *
     * Recipient approves and pays for file access
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveAndPay: (params: CallParams<FileSharingAppArgs['obj']['approveAndPay(string)void'] | FileSharingAppArgs['tuple']['approveAndPay(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.approveAndPay(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `confirmReceipt(string,string)void` ABI method.
     *
     * Recipient confirms file receipt and releases payment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    confirmReceipt: (params: CallParams<FileSharingAppArgs['obj']['confirmReceipt(string,string)void'] | FileSharingAppArgs['tuple']['confirmReceipt(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.confirmReceipt(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `disputeTransfer(string,string)void` ABI method.
     *
     * Dispute file transfer - can be called by either party
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    disputeTransfer: (params: CallParams<FileSharingAppArgs['obj']['disputeTransfer(string,string)void'] | FileSharingAppArgs['tuple']['disputeTransfer(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.disputeTransfer(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `resolveDispute(string,string)void` ABI method.
     *
     * Admin resolves dispute
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resolveDispute: (params: CallParams<FileSharingAppArgs['obj']['resolveDispute(string,string)void'] | FileSharingAppArgs['tuple']['resolveDispute(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.resolveDispute(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `cancelRequest(string)void` ABI method.
     *
     * Cancel file request (only by sender before approval)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelRequest: (params: CallParams<FileSharingAppArgs['obj']['cancelRequest(string)void'] | FileSharingAppArgs['tuple']['cancelRequest(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.cancelRequest(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getFileRequest(string)string` ABI method.
     *
     * Get file request information
     *
     * @param params The params for the smart contract call
     * @returns The call params: File request info as JSON string
     */
    getFileRequest: (params: CallParams<FileSharingAppArgs['obj']['getFileRequest(string)string'] | FileSharingAppArgs['tuple']['getFileRequest(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.getFileRequest(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getUserFileRequests(string)string` ABI method.
     *
     * Get all file requests for a user (sender or recipient)
     *
     * @param params The params for the smart contract call
     * @returns The call params: List of file requests as JSON string
     */
    getUserFileRequests: (params: CallParams<FileSharingAppArgs['obj']['getUserFileRequests(string)string'] | FileSharingAppArgs['tuple']['getUserFileRequests(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.getUserFileRequests(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `updateFileMetadata(string,string,string,string)void` ABI method.
     *
     * Update file metadata (only by sender before approval)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateFileMetadata: (params: CallParams<FileSharingAppArgs['obj']['updateFileMetadata(string,string,string,string)void'] | FileSharingAppArgs['tuple']['updateFileMetadata(string,string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.updateFileMetadata(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `emergencyWithdraw(string)void` ABI method.
     *
     * Emergency withdrawal by admin (for stuck funds)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<FileSharingAppArgs['obj']['emergencyWithdraw(string)void'] | FileSharingAppArgs['tuple']['emergencyWithdraw(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getStats()string` ABI method.
     *
     * Get application statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params: Statistics as JSON string
     */
    getStats: (params: CallParams<FileSharingAppArgs['obj']['getStats()string'] | FileSharingAppArgs['tuple']['getStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FileSharingAppParamsFactory.getStats(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FileSharingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `initialize(string)void` ABI method.
     *
     * Initialize the file sharing application
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<FileSharingAppArgs['obj']['initialize(string)void'] | FileSharingAppArgs['tuple']['initialize(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `createFileRequest(string,string,string,string,string,string,string,string)void` ABI method.
     *
     * Create a file sharing request with escrow
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createFileRequest: (params: CallParams<FileSharingAppArgs['obj']['createFileRequest(string,string,string,string,string,string,string,string)void'] | FileSharingAppArgs['tuple']['createFileRequest(string,string,string,string,string,string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.createFileRequest(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `approveAndPay(string)void` ABI method.
     *
     * Recipient approves and pays for file access
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveAndPay: (params: CallParams<FileSharingAppArgs['obj']['approveAndPay(string)void'] | FileSharingAppArgs['tuple']['approveAndPay(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.approveAndPay(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `confirmReceipt(string,string)void` ABI method.
     *
     * Recipient confirms file receipt and releases payment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    confirmReceipt: (params: CallParams<FileSharingAppArgs['obj']['confirmReceipt(string,string)void'] | FileSharingAppArgs['tuple']['confirmReceipt(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.confirmReceipt(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `disputeTransfer(string,string)void` ABI method.
     *
     * Dispute file transfer - can be called by either party
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    disputeTransfer: (params: CallParams<FileSharingAppArgs['obj']['disputeTransfer(string,string)void'] | FileSharingAppArgs['tuple']['disputeTransfer(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.disputeTransfer(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `resolveDispute(string,string)void` ABI method.
     *
     * Admin resolves dispute
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resolveDispute: (params: CallParams<FileSharingAppArgs['obj']['resolveDispute(string,string)void'] | FileSharingAppArgs['tuple']['resolveDispute(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.resolveDispute(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `cancelRequest(string)void` ABI method.
     *
     * Cancel file request (only by sender before approval)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelRequest: (params: CallParams<FileSharingAppArgs['obj']['cancelRequest(string)void'] | FileSharingAppArgs['tuple']['cancelRequest(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.cancelRequest(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getFileRequest(string)string` ABI method.
     *
     * Get file request information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: File request info as JSON string
     */
    getFileRequest: (params: CallParams<FileSharingAppArgs['obj']['getFileRequest(string)string'] | FileSharingAppArgs['tuple']['getFileRequest(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.getFileRequest(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getUserFileRequests(string)string` ABI method.
     *
     * Get all file requests for a user (sender or recipient)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: List of file requests as JSON string
     */
    getUserFileRequests: (params: CallParams<FileSharingAppArgs['obj']['getUserFileRequests(string)string'] | FileSharingAppArgs['tuple']['getUserFileRequests(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.getUserFileRequests(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `updateFileMetadata(string,string,string,string)void` ABI method.
     *
     * Update file metadata (only by sender before approval)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateFileMetadata: (params: CallParams<FileSharingAppArgs['obj']['updateFileMetadata(string,string,string,string)void'] | FileSharingAppArgs['tuple']['updateFileMetadata(string,string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.updateFileMetadata(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `emergencyWithdraw(string)void` ABI method.
     *
     * Emergency withdrawal by admin (for stuck funds)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<FileSharingAppArgs['obj']['emergencyWithdraw(string)void'] | FileSharingAppArgs['tuple']['emergencyWithdraw(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getStats()string` ABI method.
     *
     * Get application statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Statistics as JSON string
     */
    getStats: (params: CallParams<FileSharingAppArgs['obj']['getStats()string'] | FileSharingAppArgs['tuple']['getStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FileSharingAppParamsFactory.getStats(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FileSharingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `initialize(string)void` ABI method.
     *
     * Initialize the file sharing application
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<FileSharingAppArgs['obj']['initialize(string)void'] | FileSharingAppArgs['tuple']['initialize(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['initialize(string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `createFileRequest(string,string,string,string,string,string,string,string)void` ABI method.
     *
     * Create a file sharing request with escrow
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createFileRequest: async (params: CallParams<FileSharingAppArgs['obj']['createFileRequest(string,string,string,string,string,string,string,string)void'] | FileSharingAppArgs['tuple']['createFileRequest(string,string,string,string,string,string,string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.createFileRequest(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['createFileRequest(string,string,string,string,string,string,string,string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `approveAndPay(string)void` ABI method.
     *
     * Recipient approves and pays for file access
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveAndPay: async (params: CallParams<FileSharingAppArgs['obj']['approveAndPay(string)void'] | FileSharingAppArgs['tuple']['approveAndPay(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.approveAndPay(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['approveAndPay(string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `confirmReceipt(string,string)void` ABI method.
     *
     * Recipient confirms file receipt and releases payment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    confirmReceipt: async (params: CallParams<FileSharingAppArgs['obj']['confirmReceipt(string,string)void'] | FileSharingAppArgs['tuple']['confirmReceipt(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.confirmReceipt(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['confirmReceipt(string,string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `disputeTransfer(string,string)void` ABI method.
     *
     * Dispute file transfer - can be called by either party
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    disputeTransfer: async (params: CallParams<FileSharingAppArgs['obj']['disputeTransfer(string,string)void'] | FileSharingAppArgs['tuple']['disputeTransfer(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.disputeTransfer(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['disputeTransfer(string,string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `resolveDispute(string,string)void` ABI method.
     *
     * Admin resolves dispute
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resolveDispute: async (params: CallParams<FileSharingAppArgs['obj']['resolveDispute(string,string)void'] | FileSharingAppArgs['tuple']['resolveDispute(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.resolveDispute(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['resolveDispute(string,string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `cancelRequest(string)void` ABI method.
     *
     * Cancel file request (only by sender before approval)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelRequest: async (params: CallParams<FileSharingAppArgs['obj']['cancelRequest(string)void'] | FileSharingAppArgs['tuple']['cancelRequest(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.cancelRequest(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['cancelRequest(string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getFileRequest(string)string` ABI method.
     *
     * Get file request information
     *
     * @param params The params for the smart contract call
     * @returns The call result: File request info as JSON string
     */
    getFileRequest: async (params: CallParams<FileSharingAppArgs['obj']['getFileRequest(string)string'] | FileSharingAppArgs['tuple']['getFileRequest(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.getFileRequest(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['getFileRequest(string)string'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getUserFileRequests(string)string` ABI method.
     *
     * Get all file requests for a user (sender or recipient)
     *
     * @param params The params for the smart contract call
     * @returns The call result: List of file requests as JSON string
     */
    getUserFileRequests: async (params: CallParams<FileSharingAppArgs['obj']['getUserFileRequests(string)string'] | FileSharingAppArgs['tuple']['getUserFileRequests(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.getUserFileRequests(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['getUserFileRequests(string)string'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `updateFileMetadata(string,string,string,string)void` ABI method.
     *
     * Update file metadata (only by sender before approval)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateFileMetadata: async (params: CallParams<FileSharingAppArgs['obj']['updateFileMetadata(string,string,string,string)void'] | FileSharingAppArgs['tuple']['updateFileMetadata(string,string,string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.updateFileMetadata(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['updateFileMetadata(string,string,string,string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `emergencyWithdraw(string)void` ABI method.
     *
     * Emergency withdrawal by admin (for stuck funds)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<FileSharingAppArgs['obj']['emergencyWithdraw(string)void'] | FileSharingAppArgs['tuple']['emergencyWithdraw(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['emergencyWithdraw(string)void'])}
    },

    /**
     * Makes a call to the FileSharingApp smart contract using the `getStats()string` ABI method.
     *
     * Get application statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result: Statistics as JSON string
     */
    getStats: async (params: CallParams<FileSharingAppArgs['obj']['getStats()string'] | FileSharingAppArgs['tuple']['getStats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FileSharingAppParamsFactory.getStats(params))
      return {...result, return: result.return as unknown as (undefined | FileSharingAppReturns['getStats()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FileSharingAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current FileSharingApp app
   */
  state = {
  }

  public newGroup(): FileSharingAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(string)void method call against the FileSharingApp contract
       */
      initialize(params: CallParams<FileSharingAppArgs['obj']['initialize(string)void'] | FileSharingAppArgs['tuple']['initialize(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createFileRequest(string,string,string,string,string,string,string,string)void method call against the FileSharingApp contract
       */
      createFileRequest(params: CallParams<FileSharingAppArgs['obj']['createFileRequest(string,string,string,string,string,string,string,string)void'] | FileSharingAppArgs['tuple']['createFileRequest(string,string,string,string,string,string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createFileRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a approveAndPay(string)void method call against the FileSharingApp contract
       */
      approveAndPay(params: CallParams<FileSharingAppArgs['obj']['approveAndPay(string)void'] | FileSharingAppArgs['tuple']['approveAndPay(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveAndPay(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a confirmReceipt(string,string)void method call against the FileSharingApp contract
       */
      confirmReceipt(params: CallParams<FileSharingAppArgs['obj']['confirmReceipt(string,string)void'] | FileSharingAppArgs['tuple']['confirmReceipt(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.confirmReceipt(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a disputeTransfer(string,string)void method call against the FileSharingApp contract
       */
      disputeTransfer(params: CallParams<FileSharingAppArgs['obj']['disputeTransfer(string,string)void'] | FileSharingAppArgs['tuple']['disputeTransfer(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.disputeTransfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resolveDispute(string,string)void method call against the FileSharingApp contract
       */
      resolveDispute(params: CallParams<FileSharingAppArgs['obj']['resolveDispute(string,string)void'] | FileSharingAppArgs['tuple']['resolveDispute(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resolveDispute(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cancelRequest(string)void method call against the FileSharingApp contract
       */
      cancelRequest(params: CallParams<FileSharingAppArgs['obj']['cancelRequest(string)void'] | FileSharingAppArgs['tuple']['cancelRequest(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancelRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getFileRequest(string)string method call against the FileSharingApp contract
       */
      getFileRequest(params: CallParams<FileSharingAppArgs['obj']['getFileRequest(string)string'] | FileSharingAppArgs['tuple']['getFileRequest(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getFileRequest(params)))
        resultMappers.push((v) => client.decodeReturnValue('getFileRequest(string)string', v))
        return this
      },
      /**
       * Add a getUserFileRequests(string)string method call against the FileSharingApp contract
       */
      getUserFileRequests(params: CallParams<FileSharingAppArgs['obj']['getUserFileRequests(string)string'] | FileSharingAppArgs['tuple']['getUserFileRequests(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserFileRequests(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserFileRequests(string)string', v))
        return this
      },
      /**
       * Add a updateFileMetadata(string,string,string,string)void method call against the FileSharingApp contract
       */
      updateFileMetadata(params: CallParams<FileSharingAppArgs['obj']['updateFileMetadata(string,string,string,string)void'] | FileSharingAppArgs['tuple']['updateFileMetadata(string,string,string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateFileMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emergencyWithdraw(string)void method call against the FileSharingApp contract
       */
      emergencyWithdraw(params: CallParams<FileSharingAppArgs['obj']['emergencyWithdraw(string)void'] | FileSharingAppArgs['tuple']['emergencyWithdraw(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getStats()string method call against the FileSharingApp contract
       */
      getStats(params: CallParams<FileSharingAppArgs['obj']['getStats()string'] | FileSharingAppArgs['tuple']['getStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getStats()string', v))
        return this
      },
      /**
       * Add a clear state call to the FileSharingApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FileSharingAppComposer
  }
}
export type FileSharingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(string)void ABI method.
   *
   * Initialize the file sharing application
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<FileSharingAppArgs['obj']['initialize(string)void'] | FileSharingAppArgs['tuple']['initialize(string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['initialize(string)void'] | undefined]>

  /**
   * Calls the createFileRequest(string,string,string,string,string,string,string,string)void ABI method.
   *
   * Create a file sharing request with escrow
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createFileRequest(params?: CallParams<FileSharingAppArgs['obj']['createFileRequest(string,string,string,string,string,string,string,string)void'] | FileSharingAppArgs['tuple']['createFileRequest(string,string,string,string,string,string,string,string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['createFileRequest(string,string,string,string,string,string,string,string)void'] | undefined]>

  /**
   * Calls the approveAndPay(string)void ABI method.
   *
   * Recipient approves and pays for file access
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveAndPay(params?: CallParams<FileSharingAppArgs['obj']['approveAndPay(string)void'] | FileSharingAppArgs['tuple']['approveAndPay(string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['approveAndPay(string)void'] | undefined]>

  /**
   * Calls the confirmReceipt(string,string)void ABI method.
   *
   * Recipient confirms file receipt and releases payment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  confirmReceipt(params?: CallParams<FileSharingAppArgs['obj']['confirmReceipt(string,string)void'] | FileSharingAppArgs['tuple']['confirmReceipt(string,string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['confirmReceipt(string,string)void'] | undefined]>

  /**
   * Calls the disputeTransfer(string,string)void ABI method.
   *
   * Dispute file transfer - can be called by either party
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  disputeTransfer(params?: CallParams<FileSharingAppArgs['obj']['disputeTransfer(string,string)void'] | FileSharingAppArgs['tuple']['disputeTransfer(string,string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['disputeTransfer(string,string)void'] | undefined]>

  /**
   * Calls the resolveDispute(string,string)void ABI method.
   *
   * Admin resolves dispute
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveDispute(params?: CallParams<FileSharingAppArgs['obj']['resolveDispute(string,string)void'] | FileSharingAppArgs['tuple']['resolveDispute(string,string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['resolveDispute(string,string)void'] | undefined]>

  /**
   * Calls the cancelRequest(string)void ABI method.
   *
   * Cancel file request (only by sender before approval)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelRequest(params?: CallParams<FileSharingAppArgs['obj']['cancelRequest(string)void'] | FileSharingAppArgs['tuple']['cancelRequest(string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['cancelRequest(string)void'] | undefined]>

  /**
   * Calls the getFileRequest(string)string ABI method.
   *
   * Get file request information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFileRequest(params?: CallParams<FileSharingAppArgs['obj']['getFileRequest(string)string'] | FileSharingAppArgs['tuple']['getFileRequest(string)string']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['getFileRequest(string)string'] | undefined]>

  /**
   * Calls the getUserFileRequests(string)string ABI method.
   *
   * Get all file requests for a user (sender or recipient)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserFileRequests(params?: CallParams<FileSharingAppArgs['obj']['getUserFileRequests(string)string'] | FileSharingAppArgs['tuple']['getUserFileRequests(string)string']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['getUserFileRequests(string)string'] | undefined]>

  /**
   * Calls the updateFileMetadata(string,string,string,string)void ABI method.
   *
   * Update file metadata (only by sender before approval)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateFileMetadata(params?: CallParams<FileSharingAppArgs['obj']['updateFileMetadata(string,string,string,string)void'] | FileSharingAppArgs['tuple']['updateFileMetadata(string,string,string,string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['updateFileMetadata(string,string,string,string)void'] | undefined]>

  /**
   * Calls the emergencyWithdraw(string)void ABI method.
   *
   * Emergency withdrawal by admin (for stuck funds)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<FileSharingAppArgs['obj']['emergencyWithdraw(string)void'] | FileSharingAppArgs['tuple']['emergencyWithdraw(string)void']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['emergencyWithdraw(string)void'] | undefined]>

  /**
   * Calls the getStats()string ABI method.
   *
   * Get application statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStats(params?: CallParams<FileSharingAppArgs['obj']['getStats()string'] | FileSharingAppArgs['tuple']['getStats()string']>): FileSharingAppComposer<[...TReturns, FileSharingAppReturns['getStats()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FileSharingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FileSharingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FileSharingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FileSharingAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FileSharingAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FileSharingAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FileSharingAppComposerResults<TReturns>>
}
export type FileSharingAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

