#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    // smart_contracts/file_sharing_app/contract.algo.ts:3
    // export class FileSharingApp extends Contract {
    txn NumAppArgs
    bz main_bare_routing@17
    pushbytess 0xecf339e7 0x8535cfb7 0xf149ed38 0xf838ced4 0xe6b0aea6 0x52befdc6 0x64a7eec0 0xf30425ce 0xf21c359c 0x002c7c83 0xff780944 0xee59c211 // method "initialize(string)void", method "createFileRequest(string,string,string,string,string,string,string,string)void", method "approveAndPay(string)void", method "confirmReceipt(string,string)void", method "disputeTransfer(string,string)void", method "resolveDispute(string,string)void", method "cancelRequest(string)void", method "getFileRequest(string)string", method "getUserFileRequests(string)string", method "updateFileMetadata(string,string,string,string)void", method "emergencyWithdraw(string)void", method "getStats()string"
    txna ApplicationArgs 0
    match main_initialize_route@3 main_createFileRequest_route@4 main_approveAndPay_route@5 main_confirmReceipt_route@6 main_disputeTransfer_route@7 main_resolveDispute_route@8 main_cancelRequest_route@9 main_getFileRequest_route@10 main_getUserFileRequests_route@11 main_updateFileMetadata_route@12 main_emergencyWithdraw_route@13 main_getStats_route@14

main_after_if_else@21:
    // smart_contracts/file_sharing_app/contract.algo.ts:3
    // export class FileSharingApp extends Contract {
    pushint 0 // 0
    return

main_getStats_route@14:
    // smart_contracts/file_sharing_app/contract.algo.ts:122
    // public getStats(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7500027b7d
    log
    intc_0 // 1
    return

main_emergencyWithdraw_route@13:
    // smart_contracts/file_sharing_app/contract.algo.ts:114
    // public emergencyWithdraw(amount: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_updateFileMetadata_route@12:
    // smart_contracts/file_sharing_app/contract.algo.ts:106
    // public updateFileMetadata(fileId: string, newFileHash: string, newFileSize: string, newAccessFee: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_getUserFileRequests_route@11:
    // smart_contracts/file_sharing_app/contract.algo.ts:94
    // public getUserFileRequests(userAddress: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7500025b5d
    log
    intc_0 // 1
    return

main_getFileRequest_route@10:
    // smart_contracts/file_sharing_app/contract.algo.ts:84
    // public getFileRequest(fileId: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7500096e6f745f666f756e64
    log
    intc_0 // 1
    return

main_cancelRequest_route@9:
    // smart_contracts/file_sharing_app/contract.algo.ts:75
    // public cancelRequest(fileId: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_resolveDispute_route@8:
    // smart_contracts/file_sharing_app/contract.algo.ts:67
    // public resolveDispute(fileId: string, resolution: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_disputeTransfer_route@7:
    // smart_contracts/file_sharing_app/contract.algo.ts:58
    // public disputeTransfer(fileId: string, reason: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_confirmReceipt_route@6:
    // smart_contracts/file_sharing_app/contract.algo.ts:49
    // public confirmReceipt(fileId: string, confirmationHash: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_approveAndPay_route@5:
    // smart_contracts/file_sharing_app/contract.algo.ts:40
    // public approveAndPay(fileId: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_createFileRequest_route@4:
    // smart_contracts/file_sharing_app/contract.algo.ts:23-32
    // public createFileRequest(
    //   fileId: string,
    //   recipientAddress: string,
    //   fileHash: string,
    //   fileSize: string,
    //   accessFee: string,
    //   fileType: string,
    //   isIPFS: string,
    //   ipfsCID: string,
    // ): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_initialize_route@3:
    // smart_contracts/file_sharing_app/contract.algo.ts:8
    // public initialize(adminAddress: string): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_bare_routing@17:
    // smart_contracts/file_sharing_app/contract.algo.ts:3
    // export class FileSharingApp extends Contract {
    txn OnCompletion
    bnz main_after_if_else@21
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
