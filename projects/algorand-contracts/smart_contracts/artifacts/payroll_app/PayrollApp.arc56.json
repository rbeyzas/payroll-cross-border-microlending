{
    "name": "PayrollApp",
    "structs": {},
    "methods": [
        {
            "name": "createPayroll",
            "args": [
                {
                    "type": "string",
                    "name": "asaId",
                    "desc": "ASA ID for payments (0 for ALGO)"
                },
                {
                    "type": "string",
                    "name": "cycleSecs",
                    "desc": "Payment cycle in seconds"
                },
                {
                    "type": "string",
                    "name": "adminAddress",
                    "desc": "Admin address who can manage employees"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create payroll system (initialize after deployment)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addEmployee",
            "args": [
                {
                    "type": "string",
                    "name": "employeeAddress",
                    "desc": "Employee's Algorand address"
                },
                {
                    "type": "string",
                    "name": "amount",
                    "desc": "Employee's salary in microALGO"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add employee to payroll",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeEmployee",
            "args": [
                {
                    "type": "string",
                    "name": "employeeAddress",
                    "desc": "Employee's Algorand address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove employee from payroll",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fundApp",
            "args": [
                {
                    "type": "string",
                    "name": "amount",
                    "desc": "Amount to fund in microALGO"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Fund the application with ALGO or ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "disburse",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Disburse payments to employees",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pauseEmployee",
            "args": [
                {
                    "type": "string",
                    "name": "employeeAddress",
                    "desc": "Employee's Algorand address"
                },
                {
                    "type": "string",
                    "name": "paused",
                    "desc": "Whether employee is paused (true/false)"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pause or unpause an employee",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getEmployeeInfo",
            "args": [
                {
                    "type": "string",
                    "name": "employeeAddress",
                    "desc": "Employee's Algorand address"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "Employee info as \"name,salary,paused\" string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get employee information from Box Storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPayrollInfo",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get payroll information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTotalEmployees",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get total number of employees",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        85,
                        94,
                        103,
                        130,
                        139,
                        148,
                        157,
                        166,
                        175
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        189
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        88,
                        97,
                        106,
                        133,
                        142,
                        151,
                        160,
                        169,
                        178
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIFBheXJvbGxBcHAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTQKICAgIHB1c2hieXRlc3MgMHgzOTlhZTQxZiAweGU4OGE3YjcwIDB4MjVhODMzYjkgMHgwZTFkMTEwOSAweDY5ODczNmFkIDB4NzQ1NGQwNzUgMHhkMjlkMjVjMCAweGZhMzQ0Mzc5IDB4YzI0NjZmOWEgLy8gbWV0aG9kICJjcmVhdGVQYXlyb2xsKHN0cmluZyxzdHJpbmcsc3RyaW5nKXZvaWQiLCBtZXRob2QgImFkZEVtcGxveWVlKHN0cmluZyxzdHJpbmcpdm9pZCIsIG1ldGhvZCAicmVtb3ZlRW1wbG95ZWUoc3RyaW5nKXZvaWQiLCBtZXRob2QgImZ1bmRBcHAoc3RyaW5nKXZvaWQiLCBtZXRob2QgImRpc2J1cnNlKCl2b2lkIiwgbWV0aG9kICJwYXVzZUVtcGxveWVlKHN0cmluZyxzdHJpbmcpdm9pZCIsIG1ldGhvZCAiZ2V0RW1wbG95ZWVJbmZvKHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldFBheXJvbGxJbmZvKCl2b2lkIiwgbWV0aG9kICJnZXRUb3RhbEVtcGxveWVlcygpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlUGF5cm9sbF9yb3V0ZUAzIG1haW5fYWRkRW1wbG95ZWVfcm91dGVANCBtYWluX3JlbW92ZUVtcGxveWVlX3JvdXRlQDUgbWFpbl9mdW5kQXBwX3JvdXRlQDYgbWFpbl9kaXNidXJzZV9yb3V0ZUA3IG1haW5fcGF1c2VFbXBsb3llZV9yb3V0ZUA4IG1haW5fZ2V0RW1wbG95ZWVJbmZvX3JvdXRlQDkgbWFpbl9nZXRQYXlyb2xsSW5mb19yb3V0ZUAxMCBtYWluX2dldFRvdGFsRW1wbG95ZWVzX3JvdXRlQDExCgptYWluX2FmdGVyX2lmX2Vsc2VAMTg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgUGF5cm9sbEFwcCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHB1c2hpbnQgMCAvLyAwCiAgICByZXR1cm4KCm1haW5fZ2V0VG90YWxFbXBsb3llZXNfcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czo3NQogICAgLy8gcHVibGljIGdldFRvdGFsRW1wbG95ZWVzKCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFBheXJvbGxJbmZvX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6NjgKICAgIC8vIHB1YmxpYyBnZXRQYXlyb2xsSW5mbygpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRFbXBsb3llZUluZm9fcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjYwCiAgICAvLyBwdWJsaWMgZ2V0RW1wbG95ZWVJbmZvKGVtcGxveWVlQWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUwMDA5NmU2Zjc0NWY2NjZmNzU2ZTY0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcGF1c2VFbXBsb3llZV9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6NTEKICAgIC8vIHB1YmxpYyBwYXVzZUVtcGxveWVlKGVtcGxveWVlQWRkcmVzczogc3RyaW5nLCBwYXVzZWQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2Rpc2J1cnNlX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czo0MgogICAgLy8gcHVibGljIGRpc2J1cnNlKCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2Z1bmRBcHBfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBwdWJsaWMgZnVuZEFwcChhbW91bnQ6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3JlbW92ZUVtcGxveWVlX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcGF5cm9sbF9hcHAvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gcHVibGljIHJlbW92ZUVtcGxveWVlKGVtcGxveWVlQWRkcmVzczogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkRW1wbG95ZWVfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgYWRkRW1wbG95ZWUoZW1wbG95ZWVBZGRyZXNzOiBzdHJpbmcsIGFtb3VudDogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlUGF5cm9sbF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BheXJvbGxfYXBwL2NvbnRyYWN0LmFsZ28udHM6MTAKICAgIC8vIHB1YmxpYyBjcmVhdGVQYXlyb2xsKGFzYUlkOiBzdHJpbmcsIGN5Y2xlU2Vjczogc3RyaW5nLCBhZG1pbkFkZHJlc3M6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wYXlyb2xsX2FwcC9jb250cmFjdC5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjbGFzcyBQYXlyb2xsQXBwIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxOAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4K",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiABATEbQQCsggkEOZrkHwTointwBCWoM7kEDh0RCQRphzatBHRU0HUE0p0lwAT6NEN5BMJGb5o2GgCOCQBdAFQASwBCADkAMAAVAAwAA4EAQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGESADxUffHUACW5vdF9mb3VuZLAiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZQP+VMRgURCJD",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}