#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    // smart_contracts/payroll_app/contract.algo.ts:3
    // export class PayrollApp extends Contract {
    txn NumAppArgs
    bz main_bare_routing@14
    pushbytess 0xa65c1d8c 0x8c59de01 0xcd56410f 0xfa5556ec 0x698736ad 0xc94f42f0 0x8ca3bd8b 0xfa344379 0xc2466f9a // method "createPayroll()void", method "addEmployee()void", method "removeEmployee()void", method "fundApp()void", method "disburse()void", method "pauseEmployee()void", method "getEmployeeInfo()void", method "getPayrollInfo()void", method "getTotalEmployees()void"
    txna ApplicationArgs 0
    match main_createPayroll_route@3 main_addEmployee_route@4 main_removeEmployee_route@5 main_fundApp_route@6 main_disburse_route@7 main_pauseEmployee_route@8 main_getEmployeeInfo_route@9 main_getPayrollInfo_route@10 main_getTotalEmployees_route@11

main_after_if_else@18:
    // smart_contracts/payroll_app/contract.algo.ts:3
    // export class PayrollApp extends Contract {
    pushint 0 // 0
    return

main_getTotalEmployees_route@11:
    // smart_contracts/payroll_app/contract.algo.ts:63
    // public getTotalEmployees(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_getPayrollInfo_route@10:
    // smart_contracts/payroll_app/contract.algo.ts:56
    // public getPayrollInfo(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_getEmployeeInfo_route@9:
    // smart_contracts/payroll_app/contract.algo.ts:49
    // public getEmployeeInfo(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_pauseEmployee_route@8:
    // smart_contracts/payroll_app/contract.algo.ts:42
    // public pauseEmployee(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_disburse_route@7:
    // smart_contracts/payroll_app/contract.algo.ts:35
    // public disburse(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_fundApp_route@6:
    // smart_contracts/payroll_app/contract.algo.ts:28
    // public fundApp(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_removeEmployee_route@5:
    // smart_contracts/payroll_app/contract.algo.ts:21
    // public removeEmployee(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_addEmployee_route@4:
    // smart_contracts/payroll_app/contract.algo.ts:14
    // public addEmployee(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_createPayroll_route@3:
    // smart_contracts/payroll_app/contract.algo.ts:7
    // public createPayroll(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_bare_routing@14:
    // smart_contracts/payroll_app/contract.algo.ts:3
    // export class PayrollApp extends Contract {
    txn OnCompletion
    bnz main_after_if_else@18
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
